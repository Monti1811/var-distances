{
  "examples": {
    "skywalking\\oap-server\\server-core\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\core\\query\\DurationUtils.java Distance: 25 Line: 97 to 122": [
      "        durations.add(new PointOfTime(startTimeBucket));",
      "        if (startTimeBucket == endTimeBucket) {",
      "            return durations;",
      "        }",
      "",
      ">>> var: i",
      "        int i = 0;",
      "        do {",
      "            switch (step) {",
      "                case DAY:",
      "                    dateTime = dateTime.plusDays(1);",
      "                    String timeBucket = YYYYMMDD.print(dateTime);",
      "                    durations.add(new PointOfTime(Long.parseLong(timeBucket)));",
      "                    break;",
      "                case HOUR:",
      "                    dateTime = dateTime.plusHours(1);",
      "                    timeBucket = YYYYMMDDHH.print(dateTime);",
      "                    durations.add(new PointOfTime(Long.parseLong(timeBucket)));",
      "                    break;",
      "                case MINUTE:",
      "                    dateTime = dateTime.plusMinutes(1);",
      "                    timeBucket = YYYYMMDDHHMM.print(dateTime);",
      "                    durations.add(new PointOfTime(Long.parseLong(timeBucket)));",
      "                    break;",
      "                case SECOND:",
      "                    dateTime = dateTime.plusSeconds(1);",
      "                    timeBucket = YYYYMMDDHHMMSS.print(dateTime);",
      "                    durations.add(new PointOfTime(Long.parseLong(timeBucket)));",
      "                    break;",
      "            }",
      "            i++;",
      "            if (i > MAX_TIME_RANGE) {",
      "<<< var: i",
      "                // days, hours, minutes or seconds",
      "                String stepStr = step.name().toLowerCase() + \"s\";",
      "                String errorMsg = String.format(",
      "                        \"Duration data error, the range between the start time and the end time can't exceed %d %s\",",
      "                        MAX_TIME_RANGE, stepStr);"
    ],
    "skywalking\\oap-server\\server-receiver-plugin\\envoy-metrics-receiver-plugin\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\envoy\\als\\mx\\FieldsHelper.java Distance: 20 Line: 96 to 116": [
      "            final Matcher m = p.matcher(flatBuffersFieldName);",
      "            final List<Property> flatBuffersFieldNames = new ArrayList<>(m.groupCount());",
      "            final StringBuffer serviceNamePattern = new StringBuffer();",
      "            while (m.find()) {",
      "                final String properties = m.group(\"properties\");",
      ">>> var: fields",
      "                final List<Field> fields = Splitter.on(',').omitEmptyStrings().splitToList(properties).stream().map(candidate -> {",
      "                    List<String> tokens = Splitter.on('.').omitEmptyStrings().splitToList(candidate);",
      "",
      "                    StringBuilder tokenBuffer = new StringBuilder();",
      "                    List<String> candidateFields = new ArrayList<>(tokens.size());",
      "                    for (String token : tokens) {",
      "                        if (tokenBuffer.length() == 0 && token.startsWith(\"\\\"\")) {",
      "                            tokenBuffer.append(token);",
      "                        } else if (tokenBuffer.length() > 0) {",
      "                            tokenBuffer.append(\".\").append(token);",
      "                            if (token.endsWith(\"\\\"\")) {",
      "                                candidateFields.add(tokenBuffer.toString().replaceAll(\"\\\"\", \"\"));",
      "                                tokenBuffer.setLength(0);",
      "                            }",
      "                        } else {",
      "                            candidateFields.add(token);",
      "                        }",
      "                    }",
      "                    return new Field(candidateFields);",
      "                }).collect(Collectors.toList());",
      "                flatBuffersFieldNames.add(new Property(fields));",
      "<<< var: fields",
      "                m.appendReplacement(serviceNamePattern, \"%s\");",
      "            }",
      "",
      "            fieldNameMapping.put(",
      "                serviceMetaInfoFieldName,"
    ],
    "skywalking\\oap-server\\server-cluster-plugin\\cluster-consul-plugin\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\consul\\ConsulCoordinator.java Distance: 15 Line: 112 to 127": [
      "            remoteInstance = new RemoteInstance(",
      "                new Address(config.getInternalComHost(), config.getInternalComPort(), true));",
      "        }",
      "        this.selfAddress = remoteInstance.getAddress();",
      "        try {",
      ">>> var: agentClient",
      "            AgentClient agentClient = client.agentClient();",
      "            Registration registration = ImmutableRegistration.builder()",
      "                                                             .id(remoteInstance.getAddress().toString())",
      "                                                             .name(serviceName)",
      "                                                             .address(remoteInstance.getAddress().getHost())",
      "                                                             .port(remoteInstance.getAddress().getPort())",
      "                                                             .check(Registration.RegCheck.grpc(",
      "                                                                 remoteInstance.getAddress()",
      "                                                                               .getHost() + \":\" + remoteInstance",
      "                                                                     .getAddress()",
      "                                                                     .getPort(),",
      "                                                                 5",
      "                                                             )) // registers with a TTL of 5 seconds",
      "                                                             .build();",
      "",
      "            agentClient.register(registration);",
      "<<< var: agentClient",
      "            healthChecker.health();",
      "",
      "        } catch (Throwable e) {",
      "            healthChecker.unHealth(e);",
      "            throw new ServiceRegisterException(e.getMessage());"
    ],
    "skywalking\\oap-server\\server-alarm-plugin\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\AlarmRulesWatcher.java Distance: 15 Line: 110 to 125": [
      "    /**",
      "     * Don't invoke before the module finishes start",
      "     */",
      "    public void notify(Rules newRules) {",
      "        Map<AlarmRule, RunningRule> newAlarmRuleRunningRuleMap = new HashMap<>();",
      ">>> var: newRunningContext",
      "        Map<String, List<RunningRule>> newRunningContext = new HashMap<>();",
      "        Map<String, Set<String>> newExprMetricsMap = new HashMap<>();",
      "",
      "        newRules.getRules().forEach(rule -> {",
      "            /*",
      "             * If there is already an alarm rule that is the same as the new one, we'll reuse its",
      "             * corresponding runningRule, to keep its history metrics",
      "             */",
      "            RunningRule runningRule = alarmRuleRunningRuleMap.getOrDefault(rule, new RunningRule(rule));",
      "",
      "            newAlarmRuleRunningRuleMap.put(rule, runningRule);",
      "",
      "            String expression = rule.getExpression();",
      "            newExprMetricsMap.put(expression, rule.getIncludeMetrics());",
      "",
      "            List<RunningRule> runningRules = newRunningContext.computeIfAbsent(expression, key -> new ArrayList<>());",
      "<<< var: newRunningContext",
      "",
      "            runningRules.add(runningRule);",
      "        });",
      "",
      "        this.rules = newRules;"
    ],
    "skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\parser\\listener\\vservice\\VirtualCacheProcessorTest.java Distance: 10 Line: 133 to 143": [
      "        Assertions.assertNotNull(cacheAccess.getOperation());",
      "    }",
      "",
      "    @Test",
      "    public void testLocalSpan() {",
      ">>> var: spanObject",
      "        SpanObject spanObject = SpanObject.newBuilder()",
      "                                          .setSpanLayer(SpanLayer.Cache)",
      "                                          .setSpanId(0)",
      "                                          .addAllTags(buildTags())",
      "                                          .setSpanType(SpanType.Local)",
      "                                          .setStartTime(getTimeInMillis(\"2022-09-12 14:13:12.790\"))",
      "                                          .setEndTime(getTimeInMillis(\"2022-09-12 14:13:13.790\"))",
      "                                          .build();",
      "        SegmentObject segmentObject = SegmentObject.newBuilder().build();",
      "        VirtualCacheProcessor cacheVirtualServiceProcessor = buildCacheVirtualServiceProcessor();",
      "        cacheVirtualServiceProcessor.prepareVSIfNecessary(spanObject, segmentObject);",
      "<<< var: spanObject",
      "        ArrayList<Source> sources = new ArrayList<>();",
      "        cacheVirtualServiceProcessor.emitTo(sources::add);",
      "        Assertions.assertEquals(sources.size(), 3);",
      "",
      "        ServiceMeta serviceMeta = (ServiceMeta) sources.get(0);"
    ],
    "skywalking\\apm-protocol\\apm-network\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\network\\trace\\component\\command\\ProfileTaskCommand.java Distance: 10 Line: 78 to 88": [
      "            } else if (\"Duration\".equals(pair.getKey())) {",
      "                duration = Integer.parseInt(pair.getValue());",
      "            } else if (\"MinDurationThreshold\".equals(pair.getKey())) {",
      "                minDurationThreshold = Integer.parseInt(pair.getValue());",
      "            } else if (\"DumpPeriod\".equals(pair.getKey())) {",
      ">>> var: dumpPeriod",
      "                dumpPeriod = Integer.parseInt(pair.getValue());",
      "            } else if (\"MaxSamplingCount\".equals(pair.getKey())) {",
      "                maxSamplingCount = Integer.parseInt(pair.getValue());",
      "            } else if (\"StartTime\".equals(pair.getKey())) {",
      "                startTime = Long.parseLong(pair.getValue());",
      "            } else if (\"CreateTime\".equals(pair.getKey())) {",
      "                createTime = Long.parseLong(pair.getValue());",
      "            }",
      "        }",
      "",
      "        return new ProfileTaskCommand(serialNumber, taskId, endpointName, duration, minDurationThreshold, dumpPeriod, maxSamplingCount, startTime, createTime);",
      "<<< var: dumpPeriod",
      "    }",
      "",
      "    @Override",
      "    public Command.Builder serialize() {",
      "        final Command.Builder builder = commandBuilder();"
    ],
    "skywalking\\oap-server\\server-core\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\core\\query\\HierarchyQueryService.java Distance: 20 Line: 155 to 175": [
      "    public InstanceHierarchy getInstanceHierarchy(String instanceId, String layer) throws Exception {",
      "        if (!this.isEnableHierarchy) {",
      "            log.warn(\"CoreModuleConfig config {enableHierarchy} is false, return empty InstanceHierarchy.\");",
      "            return new InstanceHierarchy();",
      "        }",
      ">>> var: hierarchy",
      "        InstanceHierarchy hierarchy = new InstanceHierarchy();",
      "        List<InstanceHierarchyRelationTraffic> traffics = getHierarchyQueryDAO().readInstanceHierarchyRelations(",
      "            instanceId, layer);",
      "",
      "        for (InstanceHierarchyRelationTraffic traffic : traffics) {",
      "            HierarchyRelatedInstance instance = new HierarchyRelatedInstance();",
      "            instance.setId(traffic.getInstanceId());",
      "            instance.setName(IDManager.ServiceInstanceID.analysisId(traffic.getInstanceId()).getName());",
      "            instance.setLayer(traffic.getServiceLayer().name());",
      "            HierarchyRelatedInstance relatedInstance = new HierarchyRelatedInstance();",
      "            relatedInstance.setId(traffic.getRelatedInstanceId());",
      "            relatedInstance.setName(IDManager.ServiceInstanceID.analysisId(traffic.getRelatedInstanceId()).getName());",
      "            relatedInstance.setLayer(traffic.getRelatedServiceLayer().name());",
      "            List<String> lowerLayers = getHierarchyDefinition().getOrDefault(",
      "                traffic.getServiceLayer().name(), new ArrayList<>());",
      "            List<String> relatedLowerLayers = getHierarchyDefinition().getOrDefault(",
      "                traffic.getRelatedServiceLayer().name(), new ArrayList<>());",
      "",
      "            //should build the relations in 2 direction",
      "            if (lowerLayers.contains(traffic.getRelatedServiceLayer().name())) {",
      "                hierarchy.getRelations().add(new HierarchyInstanceRelation(instance, relatedInstance));",
      "<<< var: hierarchy",
      "            } else if (relatedLowerLayers.contains(traffic.getServiceLayer().name())) {",
      "                hierarchy.getRelations().add(new HierarchyInstanceRelation(relatedInstance, instance));",
      "            }",
      "        }"
    ],
    "skywalking\\oap-server\\analyzer\\log-analyzer\\src\\main\\java\\org\\apache\\skywalking\\oap\\log\\analyzer\\dsl\\spec\\extractor\\ExtractorSpec.java Distance: 10 Line: 345 to 355": [
      "        @Delegate",
      "        private final Sample.SampleBuilder sampleBuilder = Sample.builder();",
      "",
      "        @SuppressWarnings(\"unused\")",
      "        public Sample.SampleBuilder labels(final Map<String, ?> labels) {",
      ">>> var: filtered",
      "            final Map<String, String> filtered =",
      "                labels.entrySet()",
      "                      .stream()",
      "                      .filter(it -> isNotBlank(it.getKey()) && nonNull(it.getValue()))",
      "                      .collect(",
      "                          Collectors.toMap(",
      "                              Map.Entry::getKey,",
      "                              it -> Objects.toString(it.getValue())",
      "                          )",
      "                      );",
      "            return sampleBuilder.labels(ImmutableMap.copyOf(filtered));",
      "<<< var: filtered",
      "        }",
      "    }",
      "}"
    ],
    "skywalking\\oap-server\\server-core\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\core\\profiling\\continuous\\ContinuousProfilingQueryService.java Distance: 25 Line: 154 to 179": [
      "        final Map<String, List<Process>> instancesProcesses = processes.stream().collect(Collectors.groupingBy(Process::getInstanceId));",
      "        final List<ServiceInstance> instanceIdWithMetadata = getMetadataQueryDAO().getInstances(Arrays.asList(instancesProcesses.keySet().toArray(new String[0])));",
      "",
      "        // Build instance & process summary",
      "        final Map<String, EBPFProfilingTaskSummary> instanceSummary = buildSummaryByKey(records, EBPFProfilingTaskRecord::getInstanceId);",
      ">>> var: processSummary",
      "        final Map<String, EBPFProfilingTaskSummary> processSummary = buildSummaryByKey(records, r -> {",
      "            final EBPFProfilingTaskContinuousProfiling continuousProfiling = GSON.fromJson(r.getContinuousProfilingJson(), EBPFProfilingTaskContinuousProfiling.class);",
      "            return continuousProfiling.getProcessId();",
      "        });",
      "",
      "        // build result",
      "        return instanceIdWithMetadata.stream().map(instance -> {",
      "            final ContinuousProfilingMonitoringInstance result = new ContinuousProfilingMonitoringInstance();",
      "            result.setId(instance.getId());",
      "            result.setName(instance.getName());",
      "            result.setAttributes(instance.getAttributes());",
      "            final EBPFProfilingTaskSummary summary = instanceSummary.get(instance.getId());",
      "            if (summary != null) {",
      "                result.setTriggeredCount(summary.getCount());",
      "                result.setLastTriggerTimestamp(summary.getLastTriggerTime());",
      "            }",
      "",
      "            result.setProcesses(instancesProcesses.getOrDefault(instance.getId(), List.of())",
      "                .stream().map(p -> {",
      "                    final ContinuousProfilingMonitoringProcess process = new ContinuousProfilingMonitoringProcess();",
      "                    process.setId(p.getId());",
      "                    process.setName(p.getName());",
      "                    process.setDetectType(p.getDetectType());",
      "                    process.setLabels(p.getLabels());",
      "",
      "                    final EBPFProfilingTaskSummary processSummaryItem = processSummary.get(p.getId());",
      "<<< var: processSummary",
      "                    if (processSummaryItem != null) {",
      "                        process.setTriggeredCount(processSummaryItem.getCount());",
      "                        process.setLastTriggerTimestamp(processSummaryItem.getLastTriggerTime());",
      "                    }"
    ],
    "skywalking\\oap-server\\server-receiver-plugin\\envoy-metrics-receiver-plugin\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\envoy\\als\\tcp\\k8s\\K8sALSServiceMeshTCPAnalysis.java Distance: 25 Line: 98 to 123": [
      "            return previousResult;",
      "        }",
      "",
      "        final var newResult = previousResult.toBuilder();",
      "        final var previousMetrics = previousResult.getMetrics();",
      ">>> var: sources",
      "        final var sources = previousMetrics.getTcpMetricsBuilder();",
      "",
      "        final Address downstreamRemoteAddress =",
      "            properties.hasDownstreamDirectRemoteAddress()",
      "                ? properties.getDownstreamDirectRemoteAddress()",
      "                : properties.getDownstreamRemoteAddress();",
      "        final ServiceMetaInfo downstreamService = find(downstreamRemoteAddress.getSocketAddress().getAddress());",
      "        final Address downstreamLocalAddress = properties.getDownstreamLocalAddress();",
      "        final ServiceMetaInfo localService = find(downstreamLocalAddress.getSocketAddress().getAddress());",
      "",
      "        if (cluster.startsWith(\"inbound|\")) {",
      "            // Server side",
      "            final TCPServiceMeshMetric metrics;",
      "            if (downstreamService.equals(config.serviceMetaInfoFactory().unknown())) {",
      "                // Ingress -> sidecar(server side)",
      "                // Mesh telemetry without source, the relation would be generated.",
      "                metrics = newAdapter(entry, null, localService).adaptToDownstreamMetrics().build();",
      "",
      "                log.debug(\"Transformed ingress->sidecar inbound mesh metrics {}\", metrics);",
      "            } else {",
      "                // sidecar -> sidecar(server side)",
      "                metrics = newAdapter(entry, downstreamService, localService).adaptToDownstreamMetrics().build();",
      "",
      "                log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metrics {}\", metrics);",
      "            }",
      "            sources.addMetrics(metrics);",
      "<<< var: sources",
      "            newResult.hasDownstreamMetrics(true);",
      "        } else if (cluster.startsWith(\"outbound|\")) {",
      "            // sidecar(client side) -> sidecar",
      "            final Address upstreamRemoteAddress = properties.getUpstreamRemoteAddress();",
      "            final ServiceMetaInfo destService = find(upstreamRemoteAddress.getSocketAddress().getAddress());"
    ],
    "skywalking\\oap-server\\oal-rt\\src\\main\\java\\org\\apache\\skywalking\\oal\\rt\\util\\OALClassGenerator.java Distance: 30 Line: 334 to 364": [
      "     * Generate SourceDispatcher class and inject it to classloader",
      "     */",
      "    private Class generateDispatcherClass(String scopeName,",
      "                                          DispatcherContext dispatcherContext) throws OALCompileException {",
      "",
      ">>> var: className",
      "        String className = dispatcherClassName(scopeName, false);",
      "        CtClass dispatcherClass = classPool.makeClass(dispatcherClassName(scopeName, true));",
      "        try {",
      "            CtClass dispatcherInterface = classPool.get(DISPATCHER_INTERFACE);",
      "",
      "            dispatcherClass.addInterface(dispatcherInterface);",
      "",
      "            /**",
      "             * Set generic signature",
      "             */",
      "            String sourceClassName = oalDefine.getSourcePackage() + dispatcherContext.getSource();",
      "            SignatureAttribute.ClassSignature dispatcherSignature =",
      "                    new SignatureAttribute.ClassSignature(",
      "                            null, null,",
      "                            // Set interface and its generic params",
      "                            new SignatureAttribute.ClassType[] {",
      "                                    new SignatureAttribute.ClassType(",
      "                                            SourceDispatcher.class",
      "                                                    .getCanonicalName(),",
      "                                            new SignatureAttribute.TypeArgument[] {",
      "                                                    new SignatureAttribute.TypeArgument(",
      "                                                            new SignatureAttribute.ClassType(",
      "                                                                    sourceClassName))",
      "                                            }",
      "                                    )",
      "                            }",
      "                    );",
      "",
      "            dispatcherClass.setGenericSignature(dispatcherSignature.encode());",
      "        } catch (NotFoundException e) {",
      "            log.error(\"Can't find Dispatcher interface for \" + className + \".\", e);",
      "<<< var: className",
      "            throw new OALCompileException(e.getMessage(), e);",
      "        }",
      "",
      "        /**",
      "         * Generate methods"
    ],
    "skywalking\\oap-server\\server-core\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\core\\profiling\\ebpf\\EBPFProfilingMutationService.java Distance: 15 Line: 135 to 150": [
      "",
      "        return EBPFProfilingTaskCreationResult.builder().status(true).id(task.getLogicalId()).build();",
      "    }",
      "",
      "    public EBPFProfilingTaskCreationResult createTask(EBPFProfilingNetworkTaskRequest request) throws IOException {",
      ">>> var: current",
      "        final long current = System.currentTimeMillis();",
      "",
      "        // check request",
      "        final String error = checkCreateRequest(request);",
      "        if (StringUtil.isNotEmpty(error)) {",
      "            return buildError(error);",
      "        }",
      "",
      "        final IDManager.ServiceInstanceID.InstanceIDDefinition instanceIDDefinition =",
      "            IDManager.ServiceInstanceID.analysisId(request.getInstanceId());",
      "        // create task",
      "        final EBPFProfilingTaskRecord task = new EBPFProfilingTaskRecord();",
      "        task.setServiceId(instanceIDDefinition.getServiceId());",
      "        task.setProcessLabelsJson(Const.EMPTY_STRING);",
      "        task.setInstanceId(request.getInstanceId());",
      "        task.setStartTime(current);",
      "<<< var: current",
      "        task.setTriggerType(EBPFProfilingTriggerType.FIXED_TIME.value());",
      "        task.setFixedTriggerDuration(NETWORK_PROFILING_DURATION);",
      "        task.setTargetType(EBPFProfilingTargetType.NETWORK.value());",
      "        task.setCreateTime(current);",
      "        task.setLastUpdateTime(current);"
    ],
    "skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\parser\\listener\\SegmentAnalysisListener.java Distance: 10 Line: 87 to 97": [
      "                serviceName,",
      "                true",
      "            );",
      "        }",
      "",
      ">>> var: timeBucket",
      "        long timeBucket = TimeBucket.getRecordTimeBucket(startTimestamp);",
      "",
      "        segment.setSegmentId(segmentObject.getTraceSegmentId());",
      "        segment.setServiceId(serviceId);",
      "        segment.setServiceInstanceId(IDManager.ServiceInstanceID.buildId(",
      "            serviceId,",
      "            namingControl.formatInstanceName(segmentObject.getServiceInstance())",
      "        ));",
      "        segment.setLatency(duration);",
      "        segment.setStartTime(startTimestamp);",
      "        segment.setTimeBucket(timeBucket);",
      "<<< var: timeBucket",
      "        segment.setIsError(BooleanUtils.booleanToValue(isError));",
      "        segment.setDataBinary(segmentObject.toByteArray());",
      "",
      "        endpointName = namingControl.formatEndpointName(serviceName, span.getOperationName());",
      "        endpointId = IDManager.EndpointID.buildId("
    ],
    "skywalking\\oap-server\\server-core\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\core\\analysis\\meter\\MeterSystem.java Distance: 15 Line: 182 to 197": [
      "                                                   + \" but using \" + dataType.getName() + \" in the creation\");",
      "        }",
      "",
      "        final CtClass parentClass;",
      "        try {",
      ">>> var: parentClass",
      "            parentClass = classPool.get(meterFunction.getCanonicalName());",
      "            if (!Metrics.class.isAssignableFrom(meterFunction)) {",
      "                throw new IllegalArgumentException(",
      "                    \"Function \" + functionName + \" doesn't inherit from Metrics.\");",
      "            }",
      "        } catch (NotFoundException e) {",
      "            throw new IllegalArgumentException(\"Function \" + functionName + \" can't be found by javaassist.\");",
      "        }",
      "        final String className = formatName(metricsName);",
      "",
      "        /**",
      "         * Check whether the metrics class is already defined or not",
      "         */",
      "        try {",
      "            CtClass existingMetric = classPool.get(METER_CLASS_PACKAGE + className);",
      "            if (existingMetric.getSuperclass() != parentClass || type != meterPrototypes.get(metricsName)",
      "<<< var: parentClass",
      "                                                                                        .getScopeType()) {",
      "                throw new IllegalArgumentException(",
      "                    metricsName + \" has been defined, but calculate function or/are scope type is/are different.\");",
      "            }",
      "            log.info(\"Metric {} is already defined, so skip the metric creation.\", metricsName);"
    ],
    "skywalking\\oap-server\\server-starter\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\starter\\config\\ApplicationConfigLoader.java Distance: 25 Line: 79 to 104": [
      "            if (CollectionUtils.isNotEmpty(moduleConfig)) {",
      "                selectConfig(moduleConfig);",
      "                moduleConfig.forEach((moduleName, providerConfig) -> {",
      "                    if (providerConfig.size() > 0) {",
      "                        log.info(\"Get a module define from application.yml, module name: {}\", moduleName);",
      ">>> var: moduleConfiguration",
      "                        ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(",
      "                            moduleName);",
      "                        providerConfig.forEach((providerName, config) -> {",
      "                            log.info(",
      "                                \"Get a provider define belong to {} module, provider name: {}\", moduleName,",
      "                                providerName",
      "                            );",
      "                            bootingParameters.addRow(new TerminalFriendlyTable.Row(\"module.\" + moduleName + \".provider\", providerName));",
      "                            final Map<String, ?> propertiesConfig = (Map<String, ?>) config;",
      "                            final Properties properties = new Properties();",
      "                            if (propertiesConfig != null) {",
      "                                propertiesConfig.forEach((propertyName, propertyValue) -> {",
      "                                    if (propertyValue instanceof Map) {",
      "                                        Properties subProperties = new Properties();",
      "                                        ((Map<String, ?>) propertyValue).forEach((key, value) -> {",
      "                                            subProperties.put(key, value);",
      "                                            replacePropertyAndLog(key, value, subProperties, providerName);",
      "                                        });",
      "                                        properties.put(propertyName, subProperties);",
      "                                    } else {",
      "                                        properties.put(propertyName, propertyValue);",
      "                                        replacePropertyAndLog(propertyName, propertyValue, properties, providerName);",
      "                                    }",
      "                                });",
      "                            }",
      "                            moduleConfiguration.addProviderConfiguration(providerName, properties);",
      "<<< var: moduleConfiguration",
      "                            resolvedConfigurations.add(moduleConfiguration);",
      "                        });",
      "                    } else {",
      "                        log.warn(",
      "                            \"Get a module define from application.yml, but no provider define, use default, module name: {}\","
    ],
    "skywalking\\apm-protocol\\apm-network\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\network\\trace\\component\\command\\ProfileTaskCommand.java Distance: 20 Line: 68 to 88": [
      "        long startTime = 0;",
      "        long createTime = 0;",
      "",
      "        for (final KeyStringValuePair pair : argsList) {",
      "            if (\"SerialNumber\".equals(pair.getKey())) {",
      ">>> var: serialNumber",
      "                serialNumber = pair.getValue();",
      "            } else if (\"EndpointName\".equals(pair.getKey())) {",
      "                endpointName = pair.getValue();",
      "            } else if (\"TaskId\".equals(pair.getKey())) {",
      "                taskId = pair.getValue();",
      "            } else if (\"Duration\".equals(pair.getKey())) {",
      "                duration = Integer.parseInt(pair.getValue());",
      "            } else if (\"MinDurationThreshold\".equals(pair.getKey())) {",
      "                minDurationThreshold = Integer.parseInt(pair.getValue());",
      "            } else if (\"DumpPeriod\".equals(pair.getKey())) {",
      "                dumpPeriod = Integer.parseInt(pair.getValue());",
      "            } else if (\"MaxSamplingCount\".equals(pair.getKey())) {",
      "                maxSamplingCount = Integer.parseInt(pair.getValue());",
      "            } else if (\"StartTime\".equals(pair.getKey())) {",
      "                startTime = Long.parseLong(pair.getValue());",
      "            } else if (\"CreateTime\".equals(pair.getKey())) {",
      "                createTime = Long.parseLong(pair.getValue());",
      "            }",
      "        }",
      "",
      "        return new ProfileTaskCommand(serialNumber, taskId, endpointName, duration, minDurationThreshold, dumpPeriod, maxSamplingCount, startTime, createTime);",
      "<<< var: serialNumber",
      "    }",
      "",
      "    @Override",
      "    public Command.Builder serialize() {",
      "        final Command.Builder builder = commandBuilder();"
    ],
    "skywalking\\oap-server\\server-cluster-plugin\\cluster-zookeeper-plugin\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\cluster\\plugin\\zookeeper\\ClusterModuleZookeeperProvider.java Distance: 30 Line: 96 to 126": [
      "",
      "    @Override",
      "    public void prepare() throws ServiceNotProvidedException, ModuleStartException {",
      "        RetryPolicy retryPolicy = new ExponentialBackoffRetry(config.getBaseSleepTimeMs(), config.getMaxRetries());",
      "",
      ">>> var: builder",
      "        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()",
      "                                                                         .retryPolicy(retryPolicy)",
      "                                                                         .connectString(config.getHostPort());",
      "",
      "        if (config.isEnableACL()) {",
      "            String authInfo = config.getExpression();",
      "            if (\"digest\".equals(config.getSchema())) {",
      "                try {",
      "                    authInfo = DigestAuthenticationProvider.generateDigest(authInfo);",
      "                } catch (NoSuchAlgorithmException e) {",
      "                    throw new ModuleStartException(e.getMessage(), e);",
      "                }",
      "            } else {",
      "                throw new ModuleStartException(\"Support digest schema only.\");",
      "            }",
      "            final List<ACL> acls = Lists.newArrayList();",
      "            acls.add(new ACL(ZooDefs.Perms.ALL, new Id(config.getSchema(), authInfo)));",
      "            acls.add(new ACL(ZooDefs.Perms.READ, ZooDefs.Ids.ANYONE_ID_UNSAFE));",
      "",
      "            ACLProvider provider = new ACLProvider() {",
      "                @Override",
      "                public List<ACL> getDefaultAcl() {",
      "                    return acls;",
      "                }",
      "",
      "                @Override",
      "                public List<ACL> getAclForPath(String s) {",
      "                    return acls;",
      "                }",
      "            };",
      "            builder.aclProvider(provider);",
      "<<< var: builder",
      "            builder.authorization(config.getSchema(), config.getExpression().getBytes(StandardCharsets.UTF_8));",
      "        }",
      "        client = builder.build();",
      "",
      "        String path = BASE_PATH + (StringUtil.isEmpty(config.getNamespace()) ? \"\" : \"/\" + config.getNamespace());"
    ],
    "skywalking\\oap-server\\server-library\\library-elasticsearch-client\\src\\main\\java\\org\\apache\\skywalking\\library\\elasticsearch\\requests\\search\\BoolQueryBuilder.java Distance: 20 Line: 100 to 120": [
      "        }",
      "        final ImmutableList<Query> should;",
      "        if (this.should == null) {",
      "            should = null;",
      "        } else {",
      ">>> var: should",
      "            should = this.should.build().stream()",
      "                                .map(QueryBuilder::build)",
      "                                .collect(toImmutableList());",
      "        }",
      "        final ImmutableList<Query> mustNot;",
      "        if (this.mustNot == null) {",
      "            mustNot = null;",
      "        } else {",
      "            mustNot = this.mustNot.build().stream()",
      "                                  .map(QueryBuilder::build)",
      "                                  .collect(toImmutableList());",
      "        }",
      "        final ImmutableList<Query> shouldNot;",
      "        if (this.shouldNot == null) {",
      "            shouldNot = null;",
      "        } else {",
      "            shouldNot = this.shouldNot.build().stream()",
      "                                      .map(QueryBuilder::build)",
      "                                      .collect(toImmutableList());",
      "        }",
      "        return new BoolQuery(must, mustNot, should, shouldNot);",
      "<<< var: should",
      "    }",
      "}"
    ],
    "skywalking\\oap-server\\server-configuration\\grpc-configuration-sync\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\configuration\\grpc\\MockGRPCConfigService.java Distance: 20 Line: 87 to 107": [
      "",
      "    @Override",
      "    public void callGroup(ConfigurationRequest request,",
      "                          StreamObserver<GroupConfigurationResponse> responseObserver) {",
      "        GroupConfigurationResponse response;",
      ">>> var: uuid",
      "        String uuid = request.getUuid();",
      "        switch (this.dataFlag.get()) {",
      "            case 1:",
      "                response = GroupConfigurationResponse",
      "                    .newBuilder().setUuid(UUID.randomUUID().toString())",
      "                    .addGroupConfigTable(GroupConfigItems",
      "                                             .newBuilder().setGroupName(\"test-module.grpc.testKeyGroup\")",
      "                                             .addItems(Config",
      "                                                           .newBuilder()",
      "                                                           .setName(\"item1\")",
      "                                                           .setValue(\"100\")",
      "                                                           .build())",
      "                                             .addItems(Config",
      "                                                           .newBuilder()",
      "                                                           .setName(\"item2\")",
      "                                                           .setValue(\"2000\")",
      "                                                           .build()).build()).build();",
      "                responseObserver.onNext(response);",
      "                break;",
      "            case 2:",
      "                response = GroupConfigurationResponse.newBuilder().setUuid(uuid).build();",
      "<<< var: uuid",
      "                responseObserver.onNext(response);",
      "                break;",
      "            case 3:",
      "                response = GroupConfigurationResponse",
      "                    .newBuilder().setUuid(UUID.randomUUID().toString())"
    ],
    "skywalking\\oap-server\\server-alarm-plugin\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\expr\\rt\\AlarmMQEVisitor.java Distance: 15 Line: 240 to 255": [
      "                             .distinct().collect(Collectors.toList());",
      "        } else {",
      "            allLabelValues = labelValues;",
      "        }",
      "        for (String label : allLabelValues) {",
      ">>> var: mqeValues",
      "            MQEValues mqeValues = new MQEValues();",
      "            for (String time : windowTimes) {",
      "                Metadata metadata = new Metadata();",
      "                DataTable dataTable = timeValues.getOrDefault(time, new DataTable());",
      "                Long metricValue = dataTable.get(label);",
      "                MQEValue mqeValue = new MQEValue();",
      "                //use timeBucket as id here",
      "                mqeValue.setId(time);",
      "                if (metricValue != null) {",
      "                    mqeValue.setDoubleValue(metricValue);",
      "                } else {",
      "                    mqeValue.setEmptyValue(true);",
      "                }",
      "                KeyValue labelValue = new KeyValue(GENERAL_LABEL_NAME, label);",
      "                metadata.getLabels().add(labelValue);",
      "                mqeValues.setMetric(metadata);",
      "<<< var: mqeValues",
      "                mqeValues.getValues().add(mqeValue);",
      "            }",
      "            mqeValuesList.add(mqeValues);",
      "        }",
      "        return mqeValuesList;"
    ],
    "skywalking\\oap-server\\server-query-plugin\\zipkin-query-plugin\\src\\main\\java\\org\\apache\\skywalking\\oap\\query\\zipkin\\handler\\ZipkinQueryHandler.java Distance: 25 Line: 349 to 374": [
      "",
      "        final Map<String, Tuple2<Span.Builder, Integer>> spanCache = new HashMap<>();",
      "        for (Map.Entry<String, List<SpanAttachedEventRecord>> namedEntry : namedEvents.entrySet()) {",
      "            for (int i = 1; i <= namedEntry.getValue().size(); i++) {",
      "                final SpanAttachedEventRecord record = namedEntry.getValue().get(i - 1);",
      ">>> var: eventName",
      "                String eventName = record.getEvent() + (namedEntry.getValue().size() == 1 ? \"\" : \"-\" + i);",
      "                final SpanAttachedEvent event = SpanAttachedEvent.parseFrom(record.getDataBinary());",
      "",
      "                // find matched span",
      "                Tuple2<Span.Builder, Integer> spanBuilder = spanCache.get(record.getTraceSpanId());",
      "                if (spanBuilder == null) {",
      "                    Tuple2<Integer, Span> matchesSpan = spanWithIndex.stream().filter(s -> Objects.equals(s._2.id(), record.getTraceSpanId())).",
      "                        findFirst().orElse(null);",
      "                    if (matchesSpan == null) {",
      "                        continue;",
      "                    }",
      "",
      "                    // if the event is server side, then needs to change to the upstream span",
      "                    final String direction = getSpanAttachedEventTagValue(event.getTagsList(), \"data_direction\");",
      "                    final String type = getSpanAttachedEventTagValue(event.getTagsList(), \"data_type\");",
      "                    if ((\"request\".equals(type) && \"inbound\".equals(direction)) || (\"response\".equals(type) && \"outbound\".equals(direction))) {",
      "                        final String parentSpanId = matchesSpan._2.id();",
      "                        matchesSpan = spanWithIndex.stream().filter(s -> Objects.equals(s._2.parentId(), parentSpanId)",
      "                            && Objects.equals(s._2.kind(), Span.Kind.SERVER)).findFirst().orElse(matchesSpan);",
      "                    }",
      "",
      "                    spanBuilder = Tuple.of(matchesSpan._2.toBuilder(), matchesSpan._1);",
      "                    spanCache.put(record.getTraceSpanId(), spanBuilder);",
      "                }",
      "",
      "                appendEvent(spanBuilder._1, eventName, event);",
      "<<< var: eventName",
      "            }",
      "        }",
      "",
      "        // re-build modified spans",
      "        for (Map.Entry<String, Tuple2<Span.Builder, Integer>> entry : spanCache.entrySet()) {"
    ],
    "skywalking\\oap-server\\server-core\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\core\\query\\ServiceTopologyBuilder.java Distance: 30 Line: 64 to 94": [
      "        HashMap<String, Call> callMap = new HashMap<>();",
      "",
      "        for (Call.CallDetail clientCall : serviceRelationClientCalls) {",
      "            final IDManager.ServiceID.ServiceIDDefinition sourceService = IDManager.ServiceID.analysisId(",
      "                clientCall.getSource());",
      ">>> var: sourceServiceId",
      "            String sourceServiceId = clientCall.getSource();",
      "            IDManager.ServiceID.ServiceIDDefinition destService = IDManager.ServiceID.analysisId(",
      "                clientCall.getTarget());",
      "            String targetServiceId = clientCall.getTarget();",
      "",
      "            /*",
      "             * Use the alias name to make topology relationship accurate.",
      "             */",
      "            if (networkAddressAliasCache.get(destService.getName()) != null) {",
      "                /*",
      "                 * If alias exists, mean this network address is representing a real service.",
      "                 */",
      "                final NetworkAddressAlias networkAddressAlias = networkAddressAliasCache.get(destService.getName());",
      "                destService = IDManager.ServiceID.analysisId(",
      "                    networkAddressAlias.getRepresentServiceId());",
      "                targetServiceId = IDManager.ServiceID.buildId(destService.getName(), true);",
      "            }",
      "",
      "            /*",
      "             * Set the conjectural node type.",
      "             */",
      "            if (!nodes.containsKey(targetServiceId)) {",
      "                final Node conjecturalNode = buildNode(targetServiceId, destService);",
      "                nodes.put(targetServiceId, conjecturalNode);",
      "                if (!conjecturalNode.isReal() && StringUtil.isEmpty(conjecturalNode.getType())) {",
      "                    conjecturalNode.setType(",
      "                        componentLibraryCatalogService.getServerNameBasedOnComponent(clientCall.getComponentId()));",
      "                }",
      "            }",
      "",
      "            if (!nodes.containsKey(sourceServiceId)) {",
      "<<< var: sourceServiceId",
      "                nodes.put(sourceServiceId, buildNode(sourceServiceId, sourceService));",
      "            }",
      "",
      "            final String relationId = IDManager.ServiceID.buildRelationId(",
      "                new IDManager.ServiceID.ServiceRelationDefine(sourceServiceId, targetServiceId));"
    ],
    "skywalking\\oap-server\\oal-rt\\src\\main\\java\\org\\apache\\skywalking\\oal\\rt\\util\\OALClassGenerator.java Distance: 30 Line: 163 to 193": [
      "            log.error(\"Can't find WithMetadata interface for \" + className + \".\", e);",
      "            throw new OALCompileException(e.getMessage(), e);",
      "        }",
      "",
      "        ClassFile metricsClassClassFile = metricsClass.getClassFile();",
      ">>> var: constPool",
      "        ConstPool constPool = metricsClassClassFile.getConstPool();",
      "",
      "        /**",
      "         * Create empty construct",
      "         */",
      "        try {",
      "            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsClass);",
      "            metricsClass.addConstructor(defaultConstructor);",
      "        } catch (CannotCompileException e) {",
      "            log.error(\"Can't add empty constructor in \" + className + \".\", e);",
      "            throw new OALCompileException(e.getMessage(), e);",
      "        }",
      "",
      "        /**",
      "         * Add fields with annotations.",
      "         *",
      "         * private ${sourceField.typeName} ${sourceField.fieldName};",
      "         */",
      "        for (SourceColumn field : metricsStmt.getFieldsFromSource()) {",
      "            try {",
      "                CtField newField = CtField.make(",
      "                        \"private \" + field.getType()",
      "                                .getName() + \" \" + field.getFieldName() + \";\", metricsClass);",
      "",
      "                metricsClass.addField(newField);",
      "",
      "                metricsClass.addMethod(CtNewMethod.getter(field.getFieldGetter(), newField));",
      "                metricsClass.addMethod(CtNewMethod.setter(field.getFieldSetter(), newField));",
      "",
      "                AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(",
      "                        constPool, AnnotationsAttribute.visibleTag);",
      "<<< var: constPool",
      "                /**",
      "                 * Add @Column(name = \"${sourceField.columnName}\")",
      "                 */",
      "                Annotation columnAnnotation = new Annotation(Column.class.getName(), constPool);",
      "                columnAnnotation.addMemberValue(\"name\", new StringMemberValue(field.getColumnName(), constPool));"
    ],
    "skywalking\\oap-server\\server-receiver-plugin\\envoy-metrics-receiver-plugin\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\envoy\\als\\LogEntry2MetricsAdapter.java Distance: 30 Line: 111 to 141": [
      "        final long internalRequestLatencyNanos = properties.getTimeToFirstUpstreamTxByte().getNanos();",
      "        final long internalResponseLatencyNanos =",
      "            properties.getTimeToFirstDownstreamTxByte().getNanos()",
      "                - properties.getTimeToFirstUpstreamRxByte().getNanos();",
      "",
      ">>> var: builder",
      "        final HTTPServiceMeshMetric.Builder builder =",
      "            HTTPServiceMeshMetric",
      "                .newBuilder()",
      "                .setEndpoint(endpoint)",
      "                .setResponseCode(Math.toIntExact(responseCode))",
      "                .setStatus(status)",
      "                .setProtocol(protocol)",
      "                .setTlsMode(tlsMode)",
      "                .setInternalErrorCode(internalErrorCode)",
      "                .setInternalRequestLatencyNanos(internalRequestLatencyNanos)",
      "                .setInternalResponseLatencyNanos(internalResponseLatencyNanos);",
      "",
      "        Optional.ofNullable(sourceService)",
      "                .map(ServiceMetaInfo::getServiceName)",
      "                .ifPresent(builder::setSourceServiceName);",
      "        Optional.ofNullable(sourceService)",
      "                .map(ServiceMetaInfo::getServiceInstanceName)",
      "                .ifPresent(builder::setSourceServiceInstance);",
      "        Optional.ofNullable(targetService)",
      "                .map(ServiceMetaInfo::getServiceName)",
      "                .ifPresent(builder::setDestServiceName);",
      "        Optional.ofNullable(targetService)",
      "                .map(ServiceMetaInfo::getServiceInstanceName)",
      "                .ifPresent(builder::setDestServiceInstance);",
      "",
      "        Optional",
      "            .ofNullable(sourceService)",
      "            .map(ServiceMetaInfo::getTags)",
      "            .ifPresent(tags -> {",
      "                tags.forEach(p -> {",
      "                    builder.addSourceInstanceProperties(",
      "<<< var: builder",
      "                        KeyStringValuePair.newBuilder().setKey(p.getKey()).setValue(p.getValue()));",
      "                });",
      "            });",
      "",
      "        Optional"
    ],
    "skywalking\\oap-server\\analyzer\\agent-analyzer\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\analyzer\\provider\\trace\\parser\\listener\\RPCAnalysisListener.java Distance: 10 Line: 320 to 330": [
      "                    if (isLocalSpan && tagValue.has(\"logic-span\") && tagValue.get(\"logic-span\").getAsBoolean()) {",
      "                        logicEndpointName = span.getOperationName();",
      "                        latency = (int) (span.getEndTime() - span.getStartTime());",
      "                        status = !span.getIsError();",
      "                    } else if (tagValue.has(\"name\") && tagValue.has(\"latency\") && tagValue.has(\"status\")) {",
      ">>> var: logicEndpointName",
      "                        logicEndpointName = tagValue.get(\"name\").getAsString();",
      "                        latency = tagValue.get(\"latency\").getAsInt();",
      "                        status = tagValue.get(\"status\").getAsBoolean();",
      "                    } else {",
      "                        break;",
      "                    }",
      "                    EndpointSourceBuilder sourceBuilder = new EndpointSourceBuilder(namingControl);",
      "                    sourceBuilder.setTimeBucket(TimeBucket.getMinuteTimeBucket(span.getStartTime()));",
      "                    sourceBuilder.setDestServiceName(segmentObject.getService());",
      "                    sourceBuilder.setDestServiceInstanceName(segmentObject.getServiceInstance());",
      "                    sourceBuilder.setDestEndpointName(logicEndpointName);",
      "<<< var: logicEndpointName",
      "                    sourceBuilder.setDestLayer(Layer.GENERAL);",
      "                    sourceBuilder.setDetectPoint(DetectPoint.SERVER);",
      "                    sourceBuilder.setLatency(latency);",
      "                    sourceBuilder.setStatus(status);",
      "                    sourceBuilder.setType(RequestType.LOGIC);"
    ]
  },
  "double_declaration_examples": {
    "skywalking\\oap-server\\server-receiver-plugin\\skywalking-ebpf-receiver-plugin\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\ebpf\\provider\\handler\\ContinuousProfilingServiceHandler.java Distance: 20 Line: 243 to 263": [
      "            case SINGLEVALUE:",
      "                final ContinuousProfilingSingleValueCause singleValue = new ContinuousProfilingSingleValueCause();",
      "                singleValue.setThreshold(thresholdToLong(cause.getSingleValue().getThreshold()));",
      "                singleValue.setCurrent(thresholdToLong(cause.getSingleValue().getCurrent()));",
      "                result.setSingleValue(singleValue);",
      ">>> var: caseFormat",
      "                caseFormat = generateCauseString(type, cause.getSingleValue().getThreshold(), cause.getSingleValue().getCurrent());",
      "                break;",
      "            case URI:",
      "                final ContinuousProfilingURICause uriCause = new ContinuousProfilingURICause();",
      "                String urlCause;",
      "                switch (cause.getUri().getUriCase()) {",
      "                    case PATH:",
      "                        urlCause = cause.getUri().getPath();",
      "                        uriCause.setUriPath(cause.getUri().getPath());",
      "                        break;",
      "                    case REGEX:",
      "                        urlCause = cause.getUri().getRegex();",
      "                        uriCause.setUriRegex(cause.getUri().getRegex());",
      "                        break;",
      "                    default:",
      "                        throw new IllegalArgumentException(\"the uri case not set\");",
      "                }",
      "                uriCause.setThreshold(thresholdToLong(cause.getUri().getThreshold()));",
      "                uriCause.setCurrent(thresholdToLong(cause.getUri().getCurrent()));",
      "                result.setUri(uriCause);",
      "                caseFormat = generateCauseString(type, cause.getUri().getThreshold(), cause.getUri().getCurrent());",
      "<<< var: caseFormat",
      "                if (StringUtils.isNotEmpty(urlCause)) {",
      "                    caseFormat += \" on \" + urlCause;",
      "                }",
      "                break;",
      "        }"
    ],
    "skywalking\\apm-protocol\\apm-network\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\network\\trace\\component\\command\\ProfileTaskCommand.java Distance: 20 Line: 64 to 84": [
      "        int duration = 0;",
      "        int minDurationThreshold = 0;",
      "        int dumpPeriod = 0;",
      "        int maxSamplingCount = 0;",
      "        long startTime = 0;",
      ">>> var: createTime",
      "        long createTime = 0;",
      "",
      "        for (final KeyStringValuePair pair : argsList) {",
      "            if (\"SerialNumber\".equals(pair.getKey())) {",
      "                serialNumber = pair.getValue();",
      "            } else if (\"EndpointName\".equals(pair.getKey())) {",
      "                endpointName = pair.getValue();",
      "            } else if (\"TaskId\".equals(pair.getKey())) {",
      "                taskId = pair.getValue();",
      "            } else if (\"Duration\".equals(pair.getKey())) {",
      "                duration = Integer.parseInt(pair.getValue());",
      "            } else if (\"MinDurationThreshold\".equals(pair.getKey())) {",
      "                minDurationThreshold = Integer.parseInt(pair.getValue());",
      "            } else if (\"DumpPeriod\".equals(pair.getKey())) {",
      "                dumpPeriod = Integer.parseInt(pair.getValue());",
      "            } else if (\"MaxSamplingCount\".equals(pair.getKey())) {",
      "                maxSamplingCount = Integer.parseInt(pair.getValue());",
      "            } else if (\"StartTime\".equals(pair.getKey())) {",
      "                startTime = Long.parseLong(pair.getValue());",
      "            } else if (\"CreateTime\".equals(pair.getKey())) {",
      "                createTime = Long.parseLong(pair.getValue());",
      "<<< var: createTime",
      "            }",
      "        }",
      "",
      "        return new ProfileTaskCommand(serialNumber, taskId, endpointName, duration, minDurationThreshold, dumpPeriod, maxSamplingCount, startTime, createTime);",
      "    }"
    ],
    "skywalking\\oap-server\\server-core\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\core\\remote\\RemoteSenderService.java Distance: 10 Line: 65 to 75": [
      "     */",
      "    public void send(String nextWorkName, StreamData streamData, Selector selector) {",
      "        RemoteClientManager clientManager = moduleManager.find(CoreModule.NAME)",
      "                                                         .provider()",
      "                                                         .getService(RemoteClientManager.class);",
      ">>> var: remoteClient",
      "        RemoteClient remoteClient = null;",
      "",
      "        List<RemoteClient> clientList = clientManager.getRemoteClient();",
      "        if (clientList.size() == 0) {",
      "            LOGGER.warn(",
      "                \"There is no available remote server for now, ignore the streaming data until the cluster metadata initialized.\");",
      "            return;",
      "        }",
      "        switch (selector) {",
      "            case HashCode:",
      "                remoteClient = hashCodeSelector.select(clientList, streamData);",
      "<<< var: remoteClient",
      "                break;",
      "            case Rolling:",
      "                remoteClient = rollingSelector.select(clientList, streamData);",
      "                break;",
      "            case ForeverFirst:"
    ],
    "skywalking\\apm-protocol\\apm-network\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\network\\trace\\component\\command\\ProfileTaskCommand.java Distance: 15 Line: 59 to 74": [
      "    public ProfileTaskCommand deserialize(Command command) {",
      "        final List<KeyStringValuePair> argsList = command.getArgsList();",
      "        String serialNumber = null;",
      "        String taskId = null;",
      "        String endpointName = null;",
      ">>> var: duration",
      "        int duration = 0;",
      "        int minDurationThreshold = 0;",
      "        int dumpPeriod = 0;",
      "        int maxSamplingCount = 0;",
      "        long startTime = 0;",
      "        long createTime = 0;",
      "",
      "        for (final KeyStringValuePair pair : argsList) {",
      "            if (\"SerialNumber\".equals(pair.getKey())) {",
      "                serialNumber = pair.getValue();",
      "            } else if (\"EndpointName\".equals(pair.getKey())) {",
      "                endpointName = pair.getValue();",
      "            } else if (\"TaskId\".equals(pair.getKey())) {",
      "                taskId = pair.getValue();",
      "            } else if (\"Duration\".equals(pair.getKey())) {",
      "                duration = Integer.parseInt(pair.getValue());",
      "<<< var: duration",
      "            } else if (\"MinDurationThreshold\".equals(pair.getKey())) {",
      "                minDurationThreshold = Integer.parseInt(pair.getValue());",
      "            } else if (\"DumpPeriod\".equals(pair.getKey())) {",
      "                dumpPeriod = Integer.parseInt(pair.getValue());",
      "            } else if (\"MaxSamplingCount\".equals(pair.getKey())) {"
    ],
    "skywalking\\oap-server\\server-library\\library-util\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\library\\util\\MultipleFilesChangeMonitorTest.java Distance: 10 Line: 59 to 69": [
      "        bos.flush();",
      "        bos.close();",
      "",
      "        int countDown = 40;",
      "        boolean notified = false;",
      ">>> var: notified2",
      "        boolean notified2 = false;",
      "        while (countDown-- > 0) {",
      "            if (\"test context\".equals(content.toString())) {",
      "                file = new File(FILE_NAME);",
      "                bos = new BufferedOutputStream(Files.newOutputStream(file.toPath()));",
      "                bos.write(\"test context again\".getBytes(StandardCharsets.UTF_8));",
      "                bos.flush();",
      "                bos.close();",
      "                notified = true;",
      "            } else if (\"test context again\".equals(content.toString())) {",
      "                notified2 = true;",
      "<<< var: notified2",
      "                break;",
      "            }",
      "            Thread.sleep(500);",
      "        }",
      "        Assertions.assertTrue(notified);"
    ],
    "skywalking\\oap-server\\server-alarm-plugin\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\NotifyHandler.java Distance: 20 Line: 120 to 140": [
      "                serviceRelationDefine.getDestId());",
      "            ServiceRelationMetaInAlarm serviceRelationMetaInAlarm = new ServiceRelationMetaInAlarm();",
      "            serviceRelationMetaInAlarm.setMetricsName(meta.getMetricsName());",
      "            serviceRelationMetaInAlarm.setId(serviceRelationId);",
      "            serviceRelationMetaInAlarm.setName(sourceIdDefinition.getName() + \" to \" + destIdDefinition.getName());",
      ">>> var: metaInAlarm",
      "            metaInAlarm = serviceRelationMetaInAlarm;",
      "        } else if (DefaultScopeDefine.inServiceInstanceRelationCatalog(scope)) {",
      "            final String instanceRelationId = meta.getId();",
      "            final IDManager.ServiceInstanceID.ServiceInstanceRelationDefine serviceRelationDefine = IDManager.ServiceInstanceID.analysisRelationId(",
      "                instanceRelationId);",
      "",
      "            final IDManager.ServiceInstanceID.InstanceIDDefinition sourceIdDefinition = IDManager.ServiceInstanceID.analysisId(",
      "                serviceRelationDefine.getSourceId());",
      "            final IDManager.ServiceID.ServiceIDDefinition sourceServiceId = IDManager.ServiceID.analysisId(",
      "                sourceIdDefinition.getServiceId());",
      "            final IDManager.ServiceInstanceID.InstanceIDDefinition destIdDefinition = IDManager.ServiceInstanceID.analysisId(",
      "                serviceRelationDefine.getDestId());",
      "            final IDManager.ServiceID.ServiceIDDefinition destServiceId = IDManager.ServiceID.analysisId(",
      "                destIdDefinition.getServiceId());",
      "",
      "            ServiceInstanceRelationMetaInAlarm instanceRelationMetaInAlarm = new ServiceInstanceRelationMetaInAlarm();",
      "            instanceRelationMetaInAlarm.setMetricsName(meta.getMetricsName());",
      "            instanceRelationMetaInAlarm.setId(instanceRelationId);",
      "            instanceRelationMetaInAlarm.setName(sourceIdDefinition.getName() + \" of \" + sourceServiceId.getName()",
      "                + \" to \" + destIdDefinition.getName() + \" of \" + destServiceId.getName());",
      "            metaInAlarm = instanceRelationMetaInAlarm;",
      "<<< var: metaInAlarm",
      "        } else if (DefaultScopeDefine.inEndpointRelationCatalog(scope)) {",
      "            final String endpointRelationId = meta.getId();",
      "            final IDManager.EndpointID.EndpointRelationDefine endpointRelationDefine = IDManager.EndpointID.analysisRelationId(",
      "                endpointRelationId);",
      "            final IDManager.ServiceID.ServiceIDDefinition sourceService = IDManager.ServiceID.analysisId("
    ],
    "skywalking\\apm-protocol\\apm-network\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\network\\trace\\component\\command\\ProfileTaskCommand.java Distance: 15 Line: 57 to 72": [
      "",
      "    @Override",
      "    public ProfileTaskCommand deserialize(Command command) {",
      "        final List<KeyStringValuePair> argsList = command.getArgsList();",
      "        String serialNumber = null;",
      ">>> var: taskId",
      "        String taskId = null;",
      "        String endpointName = null;",
      "        int duration = 0;",
      "        int minDurationThreshold = 0;",
      "        int dumpPeriod = 0;",
      "        int maxSamplingCount = 0;",
      "        long startTime = 0;",
      "        long createTime = 0;",
      "",
      "        for (final KeyStringValuePair pair : argsList) {",
      "            if (\"SerialNumber\".equals(pair.getKey())) {",
      "                serialNumber = pair.getValue();",
      "            } else if (\"EndpointName\".equals(pair.getKey())) {",
      "                endpointName = pair.getValue();",
      "            } else if (\"TaskId\".equals(pair.getKey())) {",
      "                taskId = pair.getValue();",
      "<<< var: taskId",
      "            } else if (\"Duration\".equals(pair.getKey())) {",
      "                duration = Integer.parseInt(pair.getValue());",
      "            } else if (\"MinDurationThreshold\".equals(pair.getKey())) {",
      "                minDurationThreshold = Integer.parseInt(pair.getValue());",
      "            } else if (\"DumpPeriod\".equals(pair.getKey())) {"
    ],
    "skywalking\\oap-server\\server-tools\\profile-exporter\\tool-profile-snapshot-bootstrap\\src\\test\\java\\org\\apache\\skywalking\\oap\\server\\tool\\profile\\exporter\\ProfileExportedAnalyze.java Distance: 10 Line: 119 to 129": [
      "                .sorted(Comparator.comparingLong(Span::getStartTime))",
      "                .collect(Collectors.toList());",
      "",
      "        final ArrayList<ProfileAnalyzeTimeRange> ranges = new ArrayList<>();",
      "        long startTime = currentSpan.getStartTime();",
      ">>> var: endTime",
      "        long endTime = currentSpan.getStartTime();",
      "        for (Span span : childrenSpans) {",
      "            if (span.getStartTime() > startTime) {",
      "                final ProfileAnalyzeTimeRange range = new ProfileAnalyzeTimeRange();",
      "                range.setStart(startTime);",
      "                range.setEnd(span.getStartTime() - 1);",
      "                ranges.add(range);",
      "            }",
      "",
      "            startTime = span.getEndTime();",
      "            endTime = span.getEndTime();",
      "<<< var: endTime",
      "        }",
      "",
      "        // add last range",
      "        if (endTime != currentSpan.getEndTime()) {",
      "            final ProfileAnalyzeTimeRange range = new ProfileAnalyzeTimeRange();"
    ],
    "skywalking\\oap-server\\server-receiver-plugin\\skywalking-zabbix-receiver-plugin\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\receiver\\zabbix\\provider\\ZabbixMetrics.java Distance: 20 Line: 191 to 211": [
      "        public ConvertStatics convertToMeter(List<ZabbixRequest.AgentData> dataList) {",
      "            if (log.isDebugEnabled()) {",
      "                log.debug(\"Receive zabbix agent data: {}\", dataList);",
      "            }",
      "            StopWatch stopWatch = new StopWatch();",
      ">>> var: sampleFamilies",
      "            Collection<SampleFamily> sampleFamilies = null;",
      "            try {",
      "                stopWatch.start();",
      "",
      "                // Parse config labels",
      "                Map<String, String> configLabels = parseConfigLabels(dataList);",
      "",
      "                // Build metrics",
      "                ImmutableMap<String, SampleFamily> families = dataList.stream()",
      "                    // Correct state",
      "                    .filter(d -> d.getState() == 0 && NumberUtils.isParsable(d.getValue()))",
      "                    // Parse data to list",
      "                    .map(this::parseAgentData)",
      "                    .map(b -> b.build(configLabels))",
      "                    // Combine to sample family",
      "                    .collect(Collectors.groupingBy(Sample::getName))",
      "                    .entrySet().stream().collect(toImmutableMap(",
      "                        Map.Entry::getKey,",
      "                        e -> SampleFamilyBuilder.newBuilder(e.getValue().stream().toArray(Sample[]::new)).build()));",
      "",
      "                sampleFamilies = families.values();",
      "<<< var: sampleFamilies",
      "",
      "                // Each all converters",
      "                metricConverts.forEach(converter -> converter.toMeter(families));",
      "            } finally {",
      "                stopWatch.stop();"
    ],
    "skywalking\\oap-server\\server-alarm-plugin\\src\\main\\java\\org\\apache\\skywalking\\oap\\server\\core\\alarm\\provider\\NotifyHandler.java Distance: 15 Line: 140 to 155": [
      "            ServiceInstanceRelationMetaInAlarm instanceRelationMetaInAlarm = new ServiceInstanceRelationMetaInAlarm();",
      "            instanceRelationMetaInAlarm.setMetricsName(meta.getMetricsName());",
      "            instanceRelationMetaInAlarm.setId(instanceRelationId);",
      "            instanceRelationMetaInAlarm.setName(sourceIdDefinition.getName() + \" of \" + sourceServiceId.getName()",
      "                + \" to \" + destIdDefinition.getName() + \" of \" + destServiceId.getName());",
      ">>> var: metaInAlarm",
      "            metaInAlarm = instanceRelationMetaInAlarm;",
      "        } else if (DefaultScopeDefine.inEndpointRelationCatalog(scope)) {",
      "            final String endpointRelationId = meta.getId();",
      "            final IDManager.EndpointID.EndpointRelationDefine endpointRelationDefine = IDManager.EndpointID.analysisRelationId(",
      "                endpointRelationId);",
      "            final IDManager.ServiceID.ServiceIDDefinition sourceService = IDManager.ServiceID.analysisId(",
      "                endpointRelationDefine.getSourceServiceId());",
      "            final IDManager.ServiceID.ServiceIDDefinition destService = IDManager.ServiceID.analysisId(",
      "                endpointRelationDefine.getDestServiceId());",
      "",
      "            EndpointRelationMetaInAlarm endpointRelationMetaInAlarm = new EndpointRelationMetaInAlarm();",
      "            endpointRelationMetaInAlarm.setMetricsName(meta.getMetricsName());",
      "            endpointRelationMetaInAlarm.setId(endpointRelationId);",
      "            endpointRelationMetaInAlarm.setName(endpointRelationDefine.getSource() + \" in \" + sourceService.getName()",
      "                + \" to \" + endpointRelationDefine.getDest() + \" in \" + destService.getName());",
      "            metaInAlarm = endpointRelationMetaInAlarm;",
      "<<< var: metaInAlarm",
      "        } else {",
      "            return;",
      "        }",
      "",
      "        List<RunningRule> runningRules = core.findRunningRule(meta.getMetricsName());"
    ]
  }
}