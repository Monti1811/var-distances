{
  "examples": {
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\index\\query\\ScriptQueryBuilder.java Distance: 15 Line: 106 to 121": [
      "                if (AbstractQueryBuilder.NAME_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {",
      "                    queryName = parser.text();",
      "                } else if (AbstractQueryBuilder.BOOST_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {",
      "                    boost = parser.floatValue();",
      "                } else if (Script.SCRIPT_PARSE_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {",
      ">>> var: script",
      "                    script = Script.parse(parser);",
      "                } else {",
      "                    throw new ParsingException(parser.getTokenLocation(), \"[script] query does not support [\" + currentFieldName + \"]\");",
      "                }",
      "            } else {",
      "                if (token != XContentParser.Token.START_ARRAY) {",
      "                    throw new AssertionError(\"Impossible token received: \" + token.name());",
      "                }",
      "                throw new ParsingException(",
      "                    parser.getTokenLocation(),",
      "                    \"[script] query does not support an array of scripts. Use a bool query with a clause per script instead.\"",
      "                );",
      "            }",
      "        }",
      "",
      "        if (script == null) {",
      "<<< var: script",
      "            throw new ParsingException(parser.getTokenLocation(), \"script must be provided with a [script] filter\");",
      "        }",
      "",
      "        return new ScriptQueryBuilder(script).boost(boost).queryName(queryName);",
      "    }"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\index\\query\\IntervalBuilder.java Distance: 15 Line: 159 to 174": [
      "    }",
      "",
      "    protected IntervalsSource analyzeSynonyms(TokenStream ts, int maxGaps, boolean ordered) throws IOException {",
      "        List<IntervalsSource> terms = new ArrayList<>();",
      "        List<IntervalsSource> synonyms = new ArrayList<>();",
      ">>> var: bytesAtt",
      "        TermToBytesRefAttribute bytesAtt = ts.addAttribute(TermToBytesRefAttribute.class);",
      "        PositionIncrementAttribute posAtt = ts.addAttribute(PositionIncrementAttribute.class);",
      "        ts.reset();",
      "        int spaces = 0;",
      "        while (ts.incrementToken()) {",
      "            int posInc = posAtt.getPositionIncrement();",
      "            if (posInc > 0) {",
      "                if (synonyms.size() == 1) {",
      "                    terms.add(extend(synonyms.get(0), spaces));",
      "                } else if (synonyms.size() > 1) {",
      "                    terms.add(extend(Intervals.or(synonyms.toArray(new IntervalsSource[0])), spaces));",
      "                }",
      "                synonyms.clear();",
      "                spaces = posInc - 1;",
      "            }",
      "            synonyms.add(termIntervals(BytesRef.deepCopyOf(bytesAtt.getBytesRef())));",
      "<<< var: bytesAtt",
      "        }",
      "        if (synonyms.size() == 1) {",
      "            terms.add(extend(synonyms.get(0), spaces));",
      "        } else {",
      "            terms.add(extend(Intervals.or(synonyms.toArray(new IntervalsSource[0])), spaces));"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\index\\query\\FuzzyQueryBuilder.java Distance: 15 Line: 244 to 259": [
      "        builder.endObject();",
      "        builder.endObject();",
      "    }",
      "",
      "    public static FuzzyQueryBuilder fromXContent(XContentParser parser) throws IOException {",
      ">>> var: fieldName",
      "        String fieldName = null;",
      "        Object value = null;",
      "        Fuzziness fuzziness = FuzzyQueryBuilder.DEFAULT_FUZZINESS;",
      "        int prefixLength = FuzzyQueryBuilder.DEFAULT_PREFIX_LENGTH;",
      "        int maxExpansions = FuzzyQueryBuilder.DEFAULT_MAX_EXPANSIONS;",
      "        boolean transpositions = FuzzyQueryBuilder.DEFAULT_TRANSPOSITIONS;",
      "        String rewrite = null;",
      "        String queryName = null;",
      "        float boost = AbstractQueryBuilder.DEFAULT_BOOST;",
      "        String currentFieldName = null;",
      "        XContentParser.Token token;",
      "        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {",
      "            if (token == XContentParser.Token.FIELD_NAME) {",
      "                currentFieldName = parser.currentName();",
      "            } else if (token == XContentParser.Token.START_OBJECT) {",
      "                throwParsingExceptionOnMultipleFields(NAME, parser.getTokenLocation(), fieldName, currentFieldName);",
      "<<< var: fieldName",
      "                fieldName = currentFieldName;",
      "                while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {",
      "                    if (token == XContentParser.Token.FIELD_NAME) {",
      "                        currentFieldName = parser.currentName();",
      "                    } else if (token.isValue()) {"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\action\\admin\\indices\\rollover\\RolloverConditions.java Distance: 1 Line: 354 to 355": [
      "        /**",
      "         * Adds required condition to check if the index is at least <code>age</code> old",
      "         */",
      "        public Builder addMinIndexAgeCondition(TimeValue age) {",
      "            if (age != null) {",
      ">>> var: minAgeCondition",
      "                MinAgeCondition minAgeCondition = new MinAgeCondition(age);",
      "                this.conditions.put(minAgeCondition.name, minAgeCondition);",
      "<<< var: minAgeCondition",
      "            }",
      "            return this;",
      "        }",
      "",
      "        /**"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\action\\admin\\indices\\rollover\\RolloverConditions.java Distance: 1 Line: 332 to 333": [
      "        /**",
      "         * Adds a size-based condition to check if the size of the largest primary shard is at least <code>size</code>.",
      "         */",
      "        public Builder addMaxPrimaryShardSizeCondition(ByteSizeValue size) {",
      "            if (size != null) {",
      ">>> var: maxPrimaryShardSizeCondition",
      "                MaxPrimaryShardSizeCondition maxPrimaryShardSizeCondition = new MaxPrimaryShardSizeCondition(size);",
      "                this.conditions.put(maxPrimaryShardSizeCondition.name, maxPrimaryShardSizeCondition);",
      "<<< var: maxPrimaryShardSizeCondition",
      "            }",
      "            return this;",
      "        }",
      "",
      "        /**"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\index\\fielddata\\GeoPointScriptFieldData.java Distance: 4 Line: 93 to 97": [
      "        return CoreValuesSourceType.GEOPOINT;",
      "    }",
      "",
      "    @Override",
      "    public LeafPointFieldData<MultiGeoPointValues> load(LeafReaderContext context) {",
      ">>> var: script",
      "        GeoPointFieldScript script = leafFactory.newInstance(context);",
      "        return new LeafGeoPointFieldData(toScriptFieldFactory) {",
      "            @Override",
      "            public SortedNumericDocValues getSortedNumericDocValues() {",
      "                return new GeoPointScriptDocValues(script);",
      "<<< var: script",
      "            }",
      "",
      "            @Override",
      "            public long ramBytesUsed() {",
      "                return 0;"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\action\\admin\\indices\\rollover\\RolloverConditions.java Distance: 1 Line: 387 to 388": [
      "        /**",
      "         * Adds a size-based required condition to check if the size of the largest primary shard is at least <code>size</code>.",
      "         */",
      "        public Builder addMinPrimaryShardSizeCondition(ByteSizeValue size) {",
      "            if (size != null) {",
      ">>> var: minPrimaryShardSizeCondition",
      "                MinPrimaryShardSizeCondition minPrimaryShardSizeCondition = new MinPrimaryShardSizeCondition(size);",
      "                this.conditions.put(minPrimaryShardSizeCondition.name, minPrimaryShardSizeCondition);",
      "<<< var: minPrimaryShardSizeCondition",
      "            }",
      "            return this;",
      "        }",
      "",
      "        /**"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\search\\lookup\\LeafFieldLookupProvider.java Distance: 6 Line: 36 to 42": [
      "     * Create a LeafFieldLookupProvider that loads values from stored fields",
      "     */",
      "    static Function<LeafReaderContext, LeafFieldLookupProvider> fromStoredFields() {",
      "        return ctx -> new LeafFieldLookupProvider() {",
      "",
      ">>> var: storedFields",
      "            StoredFields storedFields;",
      "            int currentDoc = -1;",
      "            final List<Object> currentValues = new ArrayList<>(2);",
      "",
      "            @Override",
      "            public void populateFieldLookup(FieldLookup fieldLookup, int doc) throws IOException {",
      "                if (storedFields == null) {",
      "<<< var: storedFields",
      "                    storedFields = ctx.reader().storedFields();",
      "                }",
      "                if (doc == currentDoc) {",
      "                    fieldLookup.setValues(currentValues);",
      "                } else {"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\index\\query\\IntervalQueryBuilder.java Distance: 15 Line: 85 to 100": [
      "            throw new ParsingException(parser.getTokenLocation(), \"Expected [START_OBJECT] but got [\" + parser.currentToken() + \"]\");",
      "        }",
      "        String name = null;",
      "        float boost = 1;",
      "        IntervalsSourceProvider provider = null;",
      ">>> var: providerName",
      "        String providerName = null;",
      "        while (parser.nextToken() != XContentParser.Token.END_OBJECT) {",
      "            if (parser.currentToken() != XContentParser.Token.FIELD_NAME) {",
      "                throw new ParsingException(parser.getTokenLocation(), \"Expected [FIELD_NAME] but got [\" + parser.currentToken() + \"]\");",
      "            }",
      "            switch (parser.currentName()) {",
      "                case \"_name\" -> {",
      "                    parser.nextToken();",
      "                    name = parser.text();",
      "                }",
      "                case \"boost\" -> {",
      "                    parser.nextToken();",
      "                    boost = parser.floatValue();",
      "                }",
      "                default -> {",
      "                    if (providerName != null) {",
      "<<< var: providerName",
      "                        throw new ParsingException(",
      "                            parser.getTokenLocation(),",
      "                            \"Only one interval rule can be specified, found [\" + providerName + \"] and [\" + parser.currentName() + \"]\"",
      "                        );",
      "                    }"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\action\\admin\\indices\\rollover\\RolloverConditions.java Distance: 1 Line: 310 to 311": [
      "        /**",
      "         * Adds condition to check if the index has at least <code>numDocs</code>",
      "         */",
      "        public Builder addMaxIndexDocsCondition(Long numDocs) {",
      "            if (numDocs != null) {",
      ">>> var: maxDocsCondition",
      "                MaxDocsCondition maxDocsCondition = new MaxDocsCondition(numDocs);",
      "                this.conditions.put(maxDocsCondition.name, maxDocsCondition);",
      "<<< var: maxDocsCondition",
      "            }",
      "            return this;",
      "        }",
      "",
      "        /**"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\indices\\store\\IndicesStore.java Distance: 5 Line: 137 to 142": [
      "",
      "        if (event.state().blocks().disableStatePersistence()) {",
      "            return;",
      "        }",
      "",
      ">>> var: routingTable",
      "        RoutingTable routingTable = event.state().routingTable();",
      "",
      "        // remove entries from cache that don't exist in the routing table anymore (either closed or deleted indices)",
      "        // - removing shard data of deleted indices is handled by IndicesClusterStateService",
      "        // - closed indices don't need to be removed from the cache but we do it anyway for code simplicity",
      "        folderNotFoundCache.removeIf(shardId -> routingTable.hasIndex(shardId.getIndex()) == false);",
      "<<< var: routingTable",
      "        // remove entries from cache which are allocated to this node",
      "        final String localNodeId = event.state().nodes().getLocalNodeId();",
      "        RoutingNode localRoutingNode = event.state().getRoutingNodes().node(localNodeId);",
      "        if (localRoutingNode != null) {",
      "            for (ShardRouting routing : localRoutingNode) {"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\search\\profile\\SearchProfileDfsPhaseResult.java Distance: 6 Line: 140 to 146": [
      "        if (queryProfileShardResult == null) {",
      "            return null;",
      "        }",
      "        List<CollectorResult> subCollectorResults = new ArrayList<>(queryProfileShardResult.size());",
      "        long totalRewriteTime = 0;",
      ">>> var: totalCollectionTime",
      "        long totalCollectionTime = 0;",
      "        List<ProfileResult> profileResults = new ArrayList<>();",
      "        for (QueryProfileShardResult queryProfiler : queryProfileShardResult) {",
      "            totalRewriteTime += queryProfiler.getRewriteTime();",
      "            profileResults.addAll(queryProfiler.getQueryResults());",
      "            subCollectorResults.add(queryProfiler.getCollectorResult());",
      "            totalCollectionTime += queryProfiler.getCollectorResult().getTime();",
      "<<< var: totalCollectionTime",
      "        }",
      "        return new QueryProfileShardResult(",
      "            profileResults,",
      "            totalRewriteTime,",
      "            new CollectorResult(\"KnnQueryCollector\", CollectorResult.REASON_SEARCH_MULTI, totalCollectionTime, subCollectorResults),"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\action\\admin\\indices\\rollover\\RolloverConditions.java Distance: 1 Line: 365 to 366": [
      "        /**",
      "         * Adds required condition to check if the index has at least <code>numDocs</code>",
      "         */",
      "        public Builder addMinIndexDocsCondition(Long numDocs) {",
      "            if (numDocs != null) {",
      ">>> var: minDocsCondition",
      "                MinDocsCondition minDocsCondition = new MinDocsCondition(numDocs);",
      "                this.conditions.put(minDocsCondition.name, minDocsCondition);",
      "<<< var: minDocsCondition",
      "            }",
      "            return this;",
      "        }",
      "",
      "        /**"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\index\\fielddata\\fieldcomparator\\BytesRefFieldComparatorSource.java Distance: 4 Line: 88 to 92": [
      "                    final SortedDocValues selectedValues;",
      "                    if (nested == null) {",
      "                        selectedValues = sortMode.select(values);",
      "                    } else {",
      "                        final BitSet rootDocs = nested.rootDocs(context);",
      ">>> var: innerDocs",
      "                        final DocIdSetIterator innerDocs = nested.innerDocs(context);",
      "                        final int maxChildren = nested.getNestedSort() != null",
      "                            ? nested.getNestedSort().getMaxChildren()",
      "                            : Integer.MAX_VALUE;",
      "                        selectedValues = sortMode.select(values, rootDocs, innerDocs, maxChildren);",
      "<<< var: innerDocs",
      "                    }",
      "                    if (sortMissingFirst(missingValue) || sortMissingLast(missingValue)) {",
      "                        return selectedValues;",
      "                    } else {",
      "                        return new ReplaceMissing(selectedValues, missingBytes);"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\indices\\SystemIndexMappingUpdateService.java Distance: 5 Line: 107 to 112": [
      "            // The failures are logged in upgradeIndexMetadata(), so we don't actually care about them here.",
      "            try (var refs = new RefCountingRunnable(() -> isUpgradeInProgress.set(false))) {",
      "                for (SystemIndexDescriptor systemIndexDescriptor : getEligibleDescriptors(state.getMetadata())) {",
      "                    UpgradeStatus upgradeStatus;",
      "                    try {",
      ">>> var: upgradeStatus",
      "                        upgradeStatus = getUpgradeStatus(state, systemIndexDescriptor);",
      "                    } catch (Exception e) {",
      "                        logger.warn(\"Failed to calculate upgrade status: {}\" + e.getMessage(), e);",
      "                        continue;",
      "                    }",
      "                    if (upgradeStatus == UpgradeStatus.NEEDS_MAPPINGS_UPDATE) {",
      "<<< var: upgradeStatus",
      "                        upgradeIndexMappings(systemIndexDescriptor, ActionListener.releasing(refs.acquire()));",
      "                    }",
      "                }",
      "            }",
      "        } else {"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\search\\rescore\\RescorerBuilder.java Distance: 6 Line: 86 to 92": [
      "                    windowSize = parser.intValue();",
      "                } else {",
      "                    throw new ParsingException(parser.getTokenLocation(), \"rescore doesn't support [\" + fieldName + \"]\");",
      "                }",
      "            } else if (token == XContentParser.Token.START_OBJECT) {",
      ">>> var: rescorer",
      "                rescorer = parser.namedObject(RescorerBuilder.class, fieldName, null);",
      "                rescorerNameConsumer.accept(fieldName);",
      "            } else {",
      "                throw new ParsingException(parser.getTokenLocation(), \"unexpected token [\" + token + \"] after [\" + fieldName + \"]\");",
      "            }",
      "        }",
      "        if (rescorer == null) {",
      "<<< var: rescorer",
      "            throw new ParsingException(parser.getTokenLocation(), \"missing rescore type\");",
      "        }",
      "        if (windowSize != null) {",
      "            rescorer.windowSize(windowSize.intValue());",
      "        }"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\indices\\recovery\\RemoteRecoveryTargetHandler.java Distance: 5 Line: 336 to 341": [
      "        ActionListener<T> actionListener,",
      "        Writeable.Reader<T> reader",
      "    ) {",
      "        final Object key = new Object();",
      "        final ActionListener<T> removeListener = ActionListener.runBefore(actionListener, () -> onGoingRetryableActions.remove(key));",
      ">>> var: initialDelay",
      "        final TimeValue initialDelay = TimeValue.timeValueMillis(200);",
      "        final TimeValue timeout = recoverySettings.internalActionRetryTimeout();",
      "        final RetryableAction<T> retryableAction = new RetryableAction<>(",
      "            logger,",
      "            threadPool,",
      "            initialDelay,",
      "<<< var: initialDelay",
      "            timeout,",
      "            removeListener,",
      "            EsExecutors.DIRECT_EXECUTOR_SERVICE",
      "        ) {"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\indices\\recovery\\RecoveriesCollection.java Distance: 5 Line: 110 to 115": [
      "                oldRecoveryTarget = onGoingRecoveries.remove(recoveryId);",
      "                if (oldRecoveryTarget == null) {",
      "                    return null;",
      "                }",
      "",
      ">>> var: newRecoveryTarget",
      "                newRecoveryTarget = oldRecoveryTarget.retryCopy();",
      "                startRecoveryInternal(newRecoveryTarget, activityTimeout);",
      "            }",
      "",
      "            // Closes the current recovery target",
      "            boolean successfulReset = oldRecoveryTarget.resetRecovery(newRecoveryTarget.cancellableThreads());",
      "<<< var: newRecoveryTarget",
      "            if (successfulReset) {",
      "                logger.trace(",
      "                    \"{} restarted recovery from {}, id [{}], previous id [{}]\",",
      "                    newRecoveryTarget.shardId(),",
      "                    newRecoveryTarget.sourceNode(),"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\indices\\recovery\\RemoteRecoveryTargetHandler.java Distance: 5 Line: 337 to 342": [
      "        Writeable.Reader<T> reader",
      "    ) {",
      "        final Object key = new Object();",
      "        final ActionListener<T> removeListener = ActionListener.runBefore(actionListener, () -> onGoingRetryableActions.remove(key));",
      "        final TimeValue initialDelay = TimeValue.timeValueMillis(200);",
      ">>> var: timeout",
      "        final TimeValue timeout = recoverySettings.internalActionRetryTimeout();",
      "        final RetryableAction<T> retryableAction = new RetryableAction<>(",
      "            logger,",
      "            threadPool,",
      "            initialDelay,",
      "            timeout,",
      "<<< var: timeout",
      "            removeListener,",
      "            EsExecutors.DIRECT_EXECUTOR_SERVICE",
      "        ) {",
      "",
      "            @Override"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\action\\admin\\indices\\rollover\\RolloverConditions.java Distance: 1 Line: 343 to 344": [
      "        /**",
      "         * Adds a size-based condition to check if the docs of the largest primary shard has at least <code>numDocs</code>",
      "         */",
      "        public Builder addMaxPrimaryShardDocsCondition(Long numDocs) {",
      "            if (numDocs != null) {",
      ">>> var: maxPrimaryShardDocsCondition",
      "                MaxPrimaryShardDocsCondition maxPrimaryShardDocsCondition = new MaxPrimaryShardDocsCondition(numDocs);",
      "                this.conditions.put(maxPrimaryShardDocsCondition.name, maxPrimaryShardDocsCondition);",
      "<<< var: maxPrimaryShardDocsCondition",
      "            }",
      "            return this;",
      "        }",
      "",
      "        /**"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\action\\admin\\indices\\rollover\\RolloverConditions.java Distance: 1 Line: 398 to 399": [
      "        /**",
      "         * Adds a size-based required condition to check if the docs of the largest primary shard has at least <code>numDocs</code>",
      "         */",
      "        public Builder addMinPrimaryShardDocsCondition(Long numDocs) {",
      "            if (numDocs != null) {",
      ">>> var: minPrimaryShardDocsCondition",
      "                MinPrimaryShardDocsCondition minPrimaryShardDocsCondition = new MinPrimaryShardDocsCondition(numDocs);",
      "                this.conditions.put(minPrimaryShardDocsCondition.name, minPrimaryShardDocsCondition);",
      "<<< var: minPrimaryShardDocsCondition",
      "            }",
      "            return this;",
      "        }",
      "",
      "        public RolloverConditions build() {"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\search\\MultiValueMode.java Distance: 6 Line: 110 to 116": [
      "                    if (++count > maxChildren) {",
      "                        break;",
      "                    }",
      "                    final int docCount = values.docValueCount();",
      "                    for (int index = 0; index < docCount; ++index) {",
      ">>> var: totalValue",
      "                        totalValue += values.nextValue();",
      "                    }",
      "                    totalCount += docCount;",
      "                }",
      "            }",
      "",
      "            return totalCount > 0 ? totalValue : missingValue;",
      "<<< var: totalValue",
      "        }",
      "    },",
      "",
      "    /**",
      "     * Pick the average of all the values."
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\action\\admin\\indices\\rollover\\RolloverConditions.java Distance: 1 Line: 299 to 300": [
      "        /**",
      "         * Adds condition to check if the index is at least <code>age</code> old",
      "         */",
      "        public Builder addMaxIndexAgeCondition(TimeValue age) {",
      "            if (age != null) {",
      ">>> var: maxAgeCondition",
      "                MaxAgeCondition maxAgeCondition = new MaxAgeCondition(age);",
      "                this.conditions.put(maxAgeCondition.name, maxAgeCondition);",
      "<<< var: maxAgeCondition",
      "            }",
      "            return this;",
      "        }",
      "",
      "        /**"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\action\\admin\\indices\\rollover\\RolloverConditions.java Distance: 1 Line: 321 to 322": [
      "        /**",
      "         * Adds a size-based condition to check if the index size is at least <code>size</code>.",
      "         */",
      "        public Builder addMaxIndexSizeCondition(ByteSizeValue size) {",
      "            if (size != null) {",
      ">>> var: maxSizeCondition",
      "                MaxSizeCondition maxSizeCondition = new MaxSizeCondition(size);",
      "                this.conditions.put(maxSizeCondition.name, maxSizeCondition);",
      "<<< var: maxSizeCondition",
      "            }",
      "            return this;",
      "        }",
      "",
      "        /**"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\index\\fielddata\\NumericDoubleValues.java Distance: 4 Line: 29 to 33": [
      "",
      "    // TODO: this interaction with sort comparators is really ugly...",
      "    /** Returns numeric docvalues view of raw double bits */",
      "    public NumericDocValues getRawDoubleValues() {",
      "        return new AbstractNumericDocValues() {",
      ">>> var: docID",
      "            private int docID = -1;",
      "",
      "            @Override",
      "            public boolean advanceExact(int target) throws IOException {",
      "                docID = target;",
      "<<< var: docID",
      "                return NumericDoubleValues.this.advanceExact(target);",
      "            }",
      "",
      "            @Override",
      "            public long longValue() throws IOException {"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\search\\MultiValueMode.java Distance: 6 Line: 710 to 716": [
      "                } else {",
      "                    firstChildDoc = childDocs.advance(prevParentDoc + 1);",
      "                }",
      "",
      "                lastSeenParentDoc = parentDoc;",
      ">>> var: lastEmittedValue",
      "                lastEmittedValue = pick(values, missingValue, childDocs, firstChildDoc, parentDoc, maxChildren);",
      "                return true;",
      "            }",
      "",
      "            @Override",
      "            public double doubleValue() throws IOException {",
      "                return lastEmittedValue;",
      "<<< var: lastEmittedValue",
      "            }",
      "        };",
      "    }",
      "",
      "    protected double pick("
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\action\\admin\\indices\\rollover\\RolloverConditions.java Distance: 1 Line: 376 to 377": [
      "        /**",
      "         * Adds a size-based required condition to check if the index size is at least <code>size</code>.",
      "         */",
      "        public Builder addMinIndexSizeCondition(ByteSizeValue size) {",
      "            if (size != null) {",
      ">>> var: minSizeCondition",
      "                MinSizeCondition minSizeCondition = new MinSizeCondition(size);",
      "                this.conditions.put(minSizeCondition.name, minSizeCondition);",
      "<<< var: minSizeCondition",
      "            }",
      "            return this;",
      "        }",
      "",
      "        /**"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\index\\search\\QueryStringQueryParser.java Distance: 15 Line: 579 to 594": [
      "            } catch (IOException e) {",
      "                return super.getPrefixQuery(field, termStr);",
      "            }",
      "            tlist = new ArrayList<>();",
      "            List<String> currentPos = new ArrayList<>();",
      ">>> var: termAtt",
      "            CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class);",
      "            PositionIncrementAttribute posAtt = source.addAttribute(PositionIncrementAttribute.class);",
      "",
      "            while (true) {",
      "                try {",
      "                    if (source.incrementToken() == false) {",
      "                        break;",
      "                    }",
      "                } catch (IOException e) {",
      "                    break;",
      "                }",
      "                if (currentPos.isEmpty() == false && posAtt.getPositionIncrement() > 0) {",
      "                    tlist.add(currentPos);",
      "                    currentPos = new ArrayList<>();",
      "                }",
      "                currentPos.add(termAtt.toString());",
      "<<< var: termAtt",
      "            }",
      "            if (currentPos.isEmpty() == false) {",
      "                tlist.add(currentPos);",
      "            }",
      "        } finally {"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\index\\fielddata\\LeafFieldData.java Distance: 4 Line: 38 to 42": [
      "",
      "    /**",
      "     * Return a formatted representation of the values",
      "     */",
      "    default FormattedDocValues getFormattedValues(DocValueFormat format) {",
      ">>> var: values",
      "        SortedBinaryDocValues values = getBytesValues();",
      "        return new FormattedDocValues() {",
      "            @Override",
      "            public boolean advanceExact(int docId) throws IOException {",
      "                return values.advanceExact(docId);",
      "<<< var: values",
      "            }",
      "",
      "            @Override",
      "            public int docValueCount() {",
      "                return values.docValueCount();"
    ]
  },
  "double_declaration_examples": {
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\rest\\action\\document\\RestTermVectorsAction.java Distance: 1 Line: 64 to 65": [
      "    @Override",
      "    public RestChannelConsumer prepareRequest(final RestRequest request, final NodeClient client) throws IOException {",
      "        if (request.getRestApiVersion() == RestApiVersion.V_7 && request.hasParam(\"type\")) {",
      "            request.param(\"type\");",
      "        }",
      ">>> var: termVectorsRequest",
      "        TermVectorsRequest termVectorsRequest;",
      "        termVectorsRequest = new TermVectorsRequest(request.param(\"index\"), request.param(\"id\"));",
      "<<< var: termVectorsRequest",
      "",
      "        if (request.hasContentOrSourceParam()) {",
      "            try (XContentParser parser = request.contentOrSourceParamParser()) {",
      "                TermVectorsRequest.parseRequest(termVectorsRequest, parser, request.getRestApiVersion());",
      "            }"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\search\\aggregations\\bucket\\composite\\PointsSortedDocsProducer.java Distance: 6 Line: 45 to 51": [
      "        final PointValues values = context.reader().getPointValues(field);",
      "        if (values == null) {",
      "            // no value for the field",
      "            return DocIdSet.EMPTY;",
      "        }",
      ">>> var: lowerBucket",
      "        long lowerBucket = Long.MIN_VALUE;",
      "        Comparable<?> lowerValue = queue.getLowerValueLeadSource();",
      "        if (lowerValue != null) {",
      "            if (lowerValue.getClass() != Long.class) {",
      "                throw new IllegalStateException(\"expected Long, got \" + lowerValue.getClass());",
      "            }",
      "            lowerBucket = (Long) lowerValue;",
      "<<< var: lowerBucket",
      "        }",
      "",
      "        long upperBucket = Long.MAX_VALUE;",
      "        Comparable<?> upperValue = queue.getUpperValueLeadSource();",
      "        if (upperValue != null) {"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\plugins\\spi\\SPIClassIterator.java Distance: 1 Line: 116 to 117": [
      "                urlc.setUseCaches(false); // prevents retaining a handle to the underlying jar file, when the stream is closed",
      "                final InputStream in = urlc.getInputStream();",
      "                boolean success = false;",
      "                try {",
      "                    final BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));",
      ">>> var: line",
      "                    String line;",
      "                    while ((line = reader.readLine()) != null) {",
      "<<< var: line",
      "                        final int pos = line.indexOf('#');",
      "                        if (pos >= 0) {",
      "                            line = line.substring(0, pos);",
      "                        }",
      "                        line = line.trim();"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\index\\IndexService.java Distance: 5 Line: 453 to 458": [
      "        final Settings indexSettings = this.indexSettings.getSettings();",
      "        final ShardId shardId = routing.shardId();",
      "        boolean success = false;",
      "        Store store = null;",
      "        IndexShard indexShard = null;",
      ">>> var: lock",
      "        ShardLock lock = null;",
      "        eventListener.beforeIndexShardCreated(routing, indexSettings);",
      "        try {",
      "            // Try and acquire the shard lock, but we are on the cluster applier thread so we do not wait if it is unavailable; in that",
      "            // case, the IndicesClusterStateService will try again (in the background)",
      "            lock = nodeEnv.shardLock(shardId, \"starting shard\");",
      "<<< var: lock",
      "            ShardPath path;",
      "            try {",
      "                path = ShardPath.loadShardPath(logger, nodeEnv, shardId, this.indexSettings.customDataPath());",
      "            } catch (IllegalStateException ex) {",
      "                logger.warn(\"{} failed to load shard path, trying to remove leftover\", shardId);"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\script\\SortedSetDocValuesStringFieldScript.java Distance: 1 Line: 48 to 49": [
      "",
      "    @Override",
      "    public void execute() {",
      "        try {",
      "            if (hasValue) {",
      ">>> var: ord",
      "                long ord;",
      "                while ((ord = sortedSetDocValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {",
      "<<< var: ord",
      "                    BytesRef bytesRef = sortedSetDocValues.lookupOrd(ord);",
      "                    emit(bytesRef.utf8ToString());",
      "                }",
      "            }",
      "        } catch (IOException e) {"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\repositories\\RepositoriesStatsArchive.java Distance: 1 Line: 81 to 82": [
      "        logger.debug(\"RepositoriesStatsArchive have been cleared. Removed stats: [{}]\", clearedStats);",
      "        return clearedStats;",
      "    }",
      "",
      "    private void evict() {",
      ">>> var: entry",
      "        ArchiveEntry entry;",
      "        while ((entry = archive.peek()) != null && entry.ageInMillis(relativeTimeSupplier) >= retentionPeriod.getMillis()) {",
      "<<< var: entry",
      "            ArchiveEntry removedEntry = archive.poll();",
      "            logger.debug(\"Evicting repository stats [{}]\", removedEntry.repositoryStatsSnapshot);",
      "        }",
      "    }"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\search\\aggregations\\bucket\\composite\\PointsSortedDocsProducer.java Distance: 6 Line: 54 to 60": [
      "                throw new IllegalStateException(\"expected Long, got \" + lowerValue.getClass());",
      "            }",
      "            lowerBucket = (Long) lowerValue;",
      "        }",
      "",
      ">>> var: upperBucket",
      "        long upperBucket = Long.MAX_VALUE;",
      "        Comparable<?> upperValue = queue.getUpperValueLeadSource();",
      "        if (upperValue != null) {",
      "            if (upperValue.getClass() != Long.class) {",
      "                throw new IllegalStateException(\"expected Long, got \" + upperValue.getClass());",
      "            }",
      "            upperBucket = (Long) upperValue;",
      "<<< var: upperBucket",
      "        }",
      "        DocIdSetBuilder builder = fillDocIdSet ? new DocIdSetBuilder(context.reader().maxDoc(), values, field) : null;",
      "        Visitor visitor = new Visitor(context, queue, builder, values.getBytesPerDimension(), lowerBucket, upperBucket);",
      "        try {",
      "            values.intersect(visitor);"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\action\\search\\TransportSearchHelper.java Distance: 4 Line: 77 to 81": [
      "    static ParsedScrollId parseScrollId(String scrollId) {",
      "        try (",
      "            var decodedInputStream = Base64.getUrlDecoder().wrap(new ByteArrayInputStream(scrollId.getBytes(StandardCharsets.ISO_8859_1)));",
      "            var in = new InputStreamStreamInput(decodedInputStream)",
      "        ) {",
      ">>> var: includeContextUUID",
      "            final boolean includeContextUUID;",
      "            final String type;",
      "            final String firstChunk = in.readString();",
      "            if (INCLUDE_CONTEXT_UUID.equals(firstChunk)) {",
      "                includeContextUUID = true;",
      "<<< var: includeContextUUID",
      "                type = in.readString();",
      "            } else {",
      "                includeContextUUID = false;",
      "                type = firstChunk;",
      "            }"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\search\\aggregations\\bucket\\histogram\\InternalDateHistogram.java Distance: 6 Line: 417 to 423": [
      "        });",
      "    }",
      "",
      "    private void iterateEmptyBuckets(List<Bucket> list, ListIterator<Bucket> iter, LongConsumer onBucket) {",
      "        LongBounds bounds = emptyBucketInfo.bounds;",
      ">>> var: prepared",
      "        Rounding.Prepared prepared = null;",
      "        if (bounds != null && list.isEmpty() == false) {",
      "            long min = bounds.getMin() != null ? Math.min(bounds.getMin() + offset, list.get(0).key) : list.get(0).key;",
      "            long max = bounds.getMax() != null",
      "                ? Math.max(bounds.getMax() + offset, list.get(list.size() - 1).key)",
      "                : list.get(list.size() - 1).key;",
      "            prepared = createPrepared(min, max);",
      "<<< var: prepared",
      "        } else if (bounds != null && bounds.getMin() != null && bounds.getMax() != null) {",
      "            prepared = createPrepared(bounds.getMin() + offset, bounds.getMax() + offset);",
      "        } else if (list.isEmpty() == false) {",
      "            prepared = createPrepared(list.get(0).key, list.get(list.size() - 1).key);",
      "        }"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\search\\aggregations\\bucket\\filter\\FiltersAggregationBuilder.java Distance: 6 Line: 272 to 278": [
      "",
      "    public static FiltersAggregationBuilder parse(String aggregationName, XContentParser parser) throws IOException {",
      "",
      "        List<FiltersAggregator.KeyedFilter> filters = new ArrayList<>();",
      "",
      ">>> var: token",
      "        XContentParser.Token token;",
      "        String currentFieldName = null;",
      "        String otherBucketKey = null;",
      "        Boolean otherBucket = null;",
      "        Boolean keyedBucket = null;",
      "        boolean keyed = false;",
      "        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {",
      "<<< var: token",
      "            if (token == XContentParser.Token.FIELD_NAME) {",
      "                currentFieldName = parser.currentName();",
      "            } else if (token == XContentParser.Token.VALUE_BOOLEAN) {",
      "                if (OTHER_BUCKET_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {",
      "                    otherBucket = parser.booleanValue();"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\search\\sort\\SortBuilder.java Distance: 1 Line: 137 to 138": [
      "            return new FieldSortBuilder(fieldName);",
      "        }",
      "    }",
      "",
      "    private static void parseCompoundSortField(XContentParser parser, List<SortBuilder<?>> sortFields) throws IOException {",
      ">>> var: token",
      "        XContentParser.Token token;",
      "        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {",
      "<<< var: token",
      "            if (token == XContentParser.Token.FIELD_NAME) {",
      "                String fieldName = parser.currentName();",
      "                token = parser.nextToken();",
      "                if (token == XContentParser.Token.VALUE_STRING) {",
      "                    SortOrder order = SortOrder.fromString(parser.text());"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\action\\termvectors\\MultiTermVectorsRequest.java Distance: 4 Line: 100 to 104": [
      "        return requests;",
      "    }",
      "",
      "    public void add(TermVectorsRequest template, @Nullable XContentParser parser) throws IOException {",
      "        XContentParser.Token token;",
      ">>> var: currentFieldName",
      "        String currentFieldName = null;",
      "        if (parser != null) {",
      "            while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {",
      "                if (token == XContentParser.Token.FIELD_NAME) {",
      "                    currentFieldName = parser.currentName();",
      "<<< var: currentFieldName",
      "                } else if (token == XContentParser.Token.START_ARRAY) {",
      "                    if (\"docs\".equals(currentFieldName)) {",
      "                        while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {",
      "                            if (token != XContentParser.Token.START_OBJECT) {",
      "                                throw new IllegalArgumentException(\"docs array element should include an object\");"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\index\\fielddata\\fieldcomparator\\BytesRefFieldComparatorSource.java Distance: 5 Line: 111 to 116": [
      "            @Override",
      "            protected BinaryDocValues getBinaryDocValues(LeafReaderContext context, String field) throws IOException {",
      "                final SortedBinaryDocValues values = getValues(context);",
      "                final BinaryDocValues selectedValues;",
      "                if (nested == null) {",
      ">>> var: selectedValues",
      "                    selectedValues = sortMode.select(values, missingBytes);",
      "                } else {",
      "                    final BitSet rootDocs = nested.rootDocs(context);",
      "                    final DocIdSetIterator innerDocs = nested.innerDocs(context);",
      "                    final int maxChildren = nested.getNestedSort() != null ? nested.getNestedSort().getMaxChildren() : Integer.MAX_VALUE;",
      "                    selectedValues = sortMode.select(values, missingBytes, rootDocs, innerDocs, maxChildren);",
      "<<< var: selectedValues",
      "                }",
      "                return selectedValues;",
      "            }",
      "",
      "            @Override"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\index\\mapper\\DateFieldMapper.java Distance: 5 Line: 902 to 907": [
      "",
      "    @Override",
      "    protected void parseCreateField(DocumentParserContext context) throws IOException {",
      "        String dateAsString = context.parser().textOrNull();",
      "",
      ">>> var: timestamp",
      "        long timestamp;",
      "        if (dateAsString == null) {",
      "            if (nullValue == null) {",
      "                return;",
      "            }",
      "            timestamp = nullValue;",
      "<<< var: timestamp",
      "        } else {",
      "            try {",
      "                timestamp = fieldType().parse(dateAsString);",
      "            } catch (IllegalArgumentException | ElasticsearchParseException | DateTimeException | ArithmeticException e) {",
      "                if (ignoreMalformed) {"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\search\\aggregations\\bucket\\histogram\\DateIntervalWrapper.java Distance: 6 Line: 227 to 233": [
      "            return null;",
      "        }",
      "    }",
      "",
      "    public Rounding createRounding(ZoneId timeZone, long offset) {",
      ">>> var: tzRoundingBuilder",
      "        Rounding.Builder tzRoundingBuilder;",
      "        if (isEmpty()) {",
      "            throw new IllegalArgumentException(\"Invalid interval specified, must be non-null and non-empty\");",
      "        }",
      "        DateIntervalWrapper.IntervalTypeEnum intervalType = getIntervalType();",
      "        if (intervalType.equals(DateIntervalWrapper.IntervalTypeEnum.FIXED)) {",
      "            tzRoundingBuilder = Rounding.builder(tryIntervalAsFixedUnit());",
      "<<< var: tzRoundingBuilder",
      "        } else if (intervalType.equals(DateIntervalWrapper.IntervalTypeEnum.CALENDAR)) {",
      "            tzRoundingBuilder = Rounding.builder(tryIntervalAsCalendarUnit());",
      "        } else {",
      "            // If we get here we have exhausted our options and are not able to parse this interval",
      "            throw new IllegalArgumentException(\"Unable to parse interval [\" + dateHistogramInterval + \"]\");"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\search\\aggregations\\bucket\\range\\GeoDistanceAggregationBuilder.java Distance: 1 Line: 183 to 184": [
      "        String toAsStr = null;",
      "        double from = 0.0;",
      "        double to = Double.POSITIVE_INFINITY;",
      "        String key = null;",
      "        String currentFieldName = null;",
      ">>> var: token",
      "        Token token;",
      "        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {",
      "<<< var: token",
      "            if (token == XContentParser.Token.FIELD_NAME) {",
      "                currentFieldName = parser.currentName();",
      "            } else if (token == XContentParser.Token.VALUE_NUMBER) {",
      "                if (FROM_FIELD.match(currentFieldName, parser.getDeprecationHandler())) {",
      "                    from = parser.doubleValue();"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\action\\search\\SearchPhaseExecutionException.java Distance: 4 Line: 75 to 79": [
      "        if (shardFailures.length == 0) {",
      "            // if no successful shards, the failure can be due to EsRejectedExecutionException during fetch phase",
      "            // on coordinator node. so get the status from cause instead of returning SERVICE_UNAVAILABLE blindly",
      "            return getCause() == null ? RestStatus.SERVICE_UNAVAILABLE : ExceptionsHelper.status(getCause());",
      "        }",
      ">>> var: status",
      "        RestStatus status = shardFailures[0].status();",
      "        if (shardFailures.length > 1) {",
      "            for (int i = 1; i < shardFailures.length; i++) {",
      "                if (shardFailures[i].status().getStatus() >= RestStatus.INTERNAL_SERVER_ERROR.getStatus()) {",
      "                    status = shardFailures[i].status();",
      "<<< var: status",
      "                }",
      "            }",
      "        }",
      "        return status;",
      "    }"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\search\\aggregations\\Aggregations.java Distance: 1 Line: 127 to 128": [
      "        return builder;",
      "    }",
      "",
      "    public static Aggregations fromXContent(XContentParser parser) throws IOException {",
      "        final List<Aggregation> aggregations = new ArrayList<>();",
      ">>> var: token",
      "        XContentParser.Token token;",
      "        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {",
      "<<< var: token",
      "            if (token == XContentParser.Token.START_OBJECT) {",
      "                SetOnce<Aggregation> typedAgg = new SetOnce<>();",
      "                String currentField = parser.currentName();",
      "                parseTypedKeysObject(parser, Aggregation.TYPED_KEYS_DELIMITER, Aggregation.class, typedAgg::set);",
      "                if (typedAgg.get() != null) {"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\search\\rescore\\RescorerBuilder.java Distance: 1 Line: 75 to 76": [
      "",
      "    public static RescorerBuilder<?> parseFromXContent(XContentParser parser, Consumer<String> rescorerNameConsumer) throws IOException {",
      "        String fieldName = null;",
      "        RescorerBuilder<?> rescorer = null;",
      "        Integer windowSize = null;",
      ">>> var: token",
      "        XContentParser.Token token;",
      "        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {",
      "<<< var: token",
      "            if (token == XContentParser.Token.FIELD_NAME) {",
      "                fieldName = parser.currentName();",
      "            } else if (token.isValue()) {",
      "                if (WINDOW_SIZE_FIELD.match(fieldName, parser.getDeprecationHandler())) {",
      "                    windowSize = parser.intValue();"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\node\\InternalSettingsPreparer.java Distance: 1 Line: 94 to 95": [
      "",
      "        try {",
      "            long existingSize = Files.size(configFile);",
      "            StringBuilder builder = new StringBuilder((int) existingSize);",
      "            try (BufferedReader reader = Files.newBufferedReader(configFile, StandardCharsets.UTF_8)) {",
      ">>> var: line",
      "                String line;",
      "                while ((line = reader.readLine()) != null) {",
      "<<< var: line",
      "                    int dollarNdx;",
      "                    int nextNdx = 0;",
      "                    while ((dollarNdx = line.indexOf(\"${\", nextNdx)) != -1) {",
      "                        int closeNdx = line.indexOf('}', dollarNdx + 2);",
      "                        if (closeNdx == -1) {"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\action\\admin\\indices\\template\\get\\TransportGetIndexTemplatesAction.java Distance: 4 Line: 65 to 69": [
      "        Task task,",
      "        GetIndexTemplatesRequest request,",
      "        ClusterState state,",
      "        ActionListener<GetIndexTemplatesResponse> listener",
      "    ) {",
      ">>> var: results",
      "        List<IndexTemplateMetadata> results;",
      "",
      "        // If we did not ask for a specific name, then we return all templates",
      "        if (request.names().length == 0) {",
      "            results = new ArrayList<>(state.metadata().templates().values());",
      "<<< var: results",
      "        } else {",
      "            results = new ArrayList<>();",
      "        }",
      "",
      "        for (String name : request.names()) {"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\action\\search\\TransportSearchHelper.java Distance: 4 Line: 78 to 82": [
      "        try (",
      "            var decodedInputStream = Base64.getUrlDecoder().wrap(new ByteArrayInputStream(scrollId.getBytes(StandardCharsets.ISO_8859_1)));",
      "            var in = new InputStreamStreamInput(decodedInputStream)",
      "        ) {",
      "            final boolean includeContextUUID;",
      ">>> var: type",
      "            final String type;",
      "            final String firstChunk = in.readString();",
      "            if (INCLUDE_CONTEXT_UUID.equals(firstChunk)) {",
      "                includeContextUUID = true;",
      "                type = in.readString();",
      "<<< var: type",
      "            } else {",
      "                includeContextUUID = false;",
      "                type = firstChunk;",
      "            }",
      "            final SearchContextIdForNode[] context = in.readArray("
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\search\\suggest\\SuggestBuilder.java Distance: 1 Line: 137 to 138": [
      "        if (parser.currentToken() == null) {",
      "            // when we parse from RestSuggestAction the current token is null, advance the token",
      "            parser.nextToken();",
      "        }",
      "        assert parser.currentToken() == XContentParser.Token.START_OBJECT : \"current token must be a start object\";",
      ">>> var: token",
      "        XContentParser.Token token;",
      "        while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {",
      "<<< var: token",
      "            if (token == XContentParser.Token.FIELD_NAME) {",
      "                fieldName = parser.currentName();",
      "            } else if (token.isValue()) {",
      "                if (GLOBAL_TEXT_FIELD.match(fieldName, parser.getDeprecationHandler())) {",
      "                    suggestBuilder.setGlobalText(parser.text());"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\index\\mapper\\CompletionFieldMapper.java Distance: 5 Line: 528 to 533": [
      "                            throw new IllegalArgumentException(\"contexts field is not supported for field: [\" + fieldType().name() + \"]\");",
      "                        }",
      "                        ContextMappings contextMappings = fieldType().getContextMappings();",
      "                        XContentParser.Token currentToken = parser.currentToken();",
      "                        if (currentToken == XContentParser.Token.START_OBJECT) {",
      ">>> var: contextMapping",
      "                            ContextMapping<?> contextMapping = null;",
      "                            String fieldName = null;",
      "                            while ((currentToken = parser.nextToken()) != XContentParser.Token.END_OBJECT) {",
      "                                if (currentToken == XContentParser.Token.FIELD_NAME) {",
      "                                    fieldName = parser.currentName();",
      "                                    contextMapping = contextMappings.get(fieldName);",
      "<<< var: contextMapping",
      "                                } else {",
      "                                    assert fieldName != null;",
      "                                    assert contextsMap.containsKey(fieldName) == false;",
      "                                    contextsMap.put(fieldName, contextMapping.parseContext(documentParserContext, parser));",
      "                                }"
    ],
    "elasticsearch\\server\\src\\main\\java\\org\\elasticsearch\\index\\mapper\\DataStreamTimestampFieldMapper.java Distance: 5 Line: 231 to 236": [
      "",
      "    private static void validateTimestamp(TimestampBounds bounds, IndexableField field, DocumentParserContext context) {",
      "        long originValue = field.numericValue().longValue();",
      "        long value = originValue;",
      "",
      ">>> var: resolution",
      "        Resolution resolution;",
      "        if (context.mappingLookup()",
      "            .getMapper(DataStreamTimestampFieldMapper.DEFAULT_PATH)",
      "            .typeName()",
      "            .equals(DateFieldMapper.DATE_NANOS_CONTENT_TYPE)) {",
      "            resolution = Resolution.NANOSECONDS;",
      "<<< var: resolution",
      "            value /= NSEC_PER_MSEC;",
      "        } else {",
      "            resolution = Resolution.MILLISECONDS;",
      "        }"
    ]
  }
}